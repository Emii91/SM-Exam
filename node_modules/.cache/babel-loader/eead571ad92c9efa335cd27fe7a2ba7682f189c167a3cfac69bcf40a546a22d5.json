{"ast":null,"code":"var _jsxFileName = \"/Users/ecf/holi-exam/src/Pages/MyProfile.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import CreatePostForm from \"./Post/CreatePostForm\";\n// import DeletePost from \"./Post/DeletePost\";\n// import EditPost from \"./Post/EditPost\";\n\n// const MyProfile = () => {\n//   const [avatarURL, setAvatarURL] = useState(\"\");\n//   const [bannerURL, setBannerURL] = useState(\"\");\n//   const [error, setError] = useState(null);\n//   const [showCreatePostForm, setShowCreatePostForm] = useState(false);\n//   const [posts, setPosts] = useState([]);\n//   const [successMessage, setSuccessMessage] = useState(\"\");\n//   const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n\n//   const profileName = localStorage.getItem(\"userName\");\n\n//   useEffect(() => {\n//     const storedAvatarURL = localStorage.getItem(\"avatarURL\");\n//     if (storedAvatarURL) {\n//       setAvatarURL(storedAvatarURL);\n//     }\n\n//     const storedBannerURL = localStorage.getItem(\"bannerURL\");\n//     if (storedBannerURL) {\n//       setBannerURL(storedBannerURL);\n//     }\n\n//     const fetchUserPosts = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/posts`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch user's posts\");\n//         }\n//         const postData = await response.json();\n//         setPosts(postData);\n//       } catch (error) {\n//         console.error(\"Error fetching user's posts:\", error);\n//         setError(\"Failed to fetch user's posts\");\n//       }\n//     };\n\n//     fetchUserPosts();\n//   }, []);\n\n//   const handleAvatarURLChange = (event) => {\n//     setAvatarURL(event.target.value);\n//   };\n\n//   const handleBannerURLChange = (event) => {\n//     setBannerURL(event.target.value);\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/media`,\n//         {\n//           method: \"PUT\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             avatar: avatarURL,\n//             banner: bannerURL,\n//           }),\n//         }\n//       );\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to update profile media\");\n//       }\n\n//       localStorage.setItem(\"avatarURL\", avatarURL);\n//       localStorage.setItem(\"bannerURL\", bannerURL);\n\n//       console.log(\"Avatar and Banner URLs updated successfully!\");\n//     } catch (error) {\n//       console.error(\"Error updating profile media:\", error);\n//       setError(\"Failed to update profile media\");\n//     }\n//   };\n\n//   const handleCreatePostClick = () => {\n//     setShowCreatePostForm(true);\n//   };\n\n//   const handlePostDeleted = async (postId) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n//         {\n//           method: \"DELETE\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n\n//       if (response.ok || response.status === 204) {\n//         setPosts(posts.filter((post) => post.id !== postId));\n//         setSuccessMessage(\"Post deleted successfully!\");\n//         setSuccessMessageVisible(true);\n//       } else {\n//         throw new Error(\"Failed to delete post\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       setError(\"Failed to delete post\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label htmlFor=\"avatarURL\">Avatar URL:</label>\n//           <input\n//             type=\"text\"\n//             id=\"avatarURL\"\n//             value={avatarURL}\n//             onChange={handleAvatarURLChange}\n//           />\n//         </div>\n//         <div>\n//           <label htmlFor=\"bannerURL\">Banner URL:</label>\n//           <input\n//             type=\"text\"\n//             id=\"bannerURL\"\n//             value={bannerURL}\n//             onChange={handleBannerURLChange}\n//           />\n//         </div>\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//       <button onClick={handleCreatePostClick}>Create Post</button>\n//       {showCreatePostForm && <CreatePostForm />}\n//       <Link to=\"/posts\">View Posts</Link>\n//       {avatarURL && (\n//         <div>\n//           <h2>Avatar Preview</h2>\n//           <img src={avatarURL} alt=\"Avatar\" style={{ width: \"200px\" }} />\n//         </div>\n//       )}\n//       {bannerURL && (\n//         <div>\n//           <h2>Banner Preview</h2>\n//           <img src={bannerURL} alt=\"Banner\" style={{ width: \"400px\" }} />\n//         </div>\n//       )}\n//       {error && <p>Error: {error}</p>}\n//       <h2>Your Posts:</h2>\n//       {posts.map((post) => (\n//         <div key={post.id}>\n//           <h3>{post.title}</h3>\n//           <p>{post.body}</p>\n//           <EditPost postId={post.id} />\n//           <DeletePost postId={post.id} onPostDeleted={handlePostDeleted} />\n//         </div>\n//       ))}\n//       {successMessageVisible && <p>{successMessage}</p>}\n//     </div>\n//   );\n// };\n\n// export default MyProfile;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import CreatePostForm from \"./Post/CreatePostForm\";\n// import DeletePost from \"./Post/DeletePost\";\n// import EditPost from \"./Post/EditPost\";\n\n// const MyProfile = () => {\n//   const [avatarURL, setAvatarURL] = useState(\"\");\n//   const [bannerURL, setBannerURL] = useState(\"\");\n//   const [error, setError] = useState(null);\n//   const [showCreatePostForm, setShowCreatePostForm] = useState(false);\n//   const [posts, setPosts] = useState([]);\n//   const [successMessage, setSuccessMessage] = useState(\"\");\n//   const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n\n//   const profileName = localStorage.getItem(\"userName\");\n\n//   useEffect(() => {\n//     const storedAvatarURL = localStorage.getItem(\"avatarURL\");\n//     if (storedAvatarURL) {\n//       setAvatarURL(storedAvatarURL);\n//     }\n\n//     const storedBannerURL = localStorage.getItem(\"bannerURL\");\n//     if (storedBannerURL) {\n//       setBannerURL(storedBannerURL);\n//     }\n\n//     const fetchUserPosts = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/posts`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch user's posts\");\n//         }\n//         const postData = await response.json();\n//         setPosts(postData);\n//       } catch (error) {\n//         console.error(\"Error fetching user's posts:\", error);\n//         setError(\"Failed to fetch user's posts\");\n//       }\n//     };\n\n//     fetchUserPosts();\n//   }, []);\n\n//   const handleAvatarURLChange = (event) => {\n//     setAvatarURL(event.target.value);\n//   };\n\n//   const handleBannerURLChange = (event) => {\n//     setBannerURL(event.target.value);\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/media`,\n//         {\n//           method: \"PUT\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             avatar: avatarURL,\n//             banner: bannerURL,\n//           }),\n//         }\n//       );\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to update profile media\");\n//       }\n\n//       localStorage.setItem(\"avatarURL\", avatarURL);\n//       localStorage.setItem(\"bannerURL\", bannerURL);\n\n//       console.log(\"Avatar and Banner URLs updated successfully!\");\n//     } catch (error) {\n//       console.error(\"Error updating profile media:\", error);\n//       setError(\"Failed to update profile media\");\n//     }\n//   };\n\n//   const handleCreatePostClick = () => {\n//     setShowCreatePostForm(true);\n//   };\n\n//   const handlePostDeleted = async (postId) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n//         {\n//           method: \"DELETE\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n\n//       if (response.ok || response.status === 204) {\n//         setPosts(posts.filter((post) => post.id !== postId));\n//         setSuccessMessage(\"Post deleted successfully!\");\n//         setSuccessMessageVisible(true);\n//       } else {\n//         throw new Error(\"Failed to delete post\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       setError(\"Failed to delete post\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       {bannerURL && (\n//         <div>\n//           <h2>Banner Preview</h2>\n//           <img src={bannerURL} alt=\"Banner\" style={{ width: \"400px\" }} />\n//         </div>\n//       )}\n//       {avatarURL && (\n//         <div>\n//           <h2>Avatar Preview</h2>\n//           <img src={avatarURL} alt=\"Avatar\" style={{ width: \"200px\" }} />\n//         </div>\n//       )}\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label htmlFor=\"avatarURL\">Avatar URL:</label>\n//           <input\n//             type=\"text\"\n//             id=\"avatarURL\"\n//             value={avatarURL}\n//             onChange={handleAvatarURLChange}\n//           />\n//         </div>\n//         <div>\n//           <label htmlFor=\"bannerURL\">Banner URL:</label>\n//           <input\n//             type=\"text\"\n//             id=\"bannerURL\"\n//             value={bannerURL}\n//             onChange={handleBannerURLChange}\n//           />\n//         </div>\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//       <button onClick={handleCreatePostClick}>Create Post</button>\n//       {showCreatePostForm && <CreatePostForm />}\n//       <Link to=\"/posts\">View Posts</Link>\n//       {error && <p>Error: {error}</p>}\n//       <h2>Your Posts:</h2>\n//       {posts.map((post) => (\n//         <div key={post.id}>\n//           <h3>{post.title}</h3>\n//           <p>{post.body}</p>\n//           <EditPost postId={post.id} />\n//           <DeletePost postId={post.id} onPostDeleted={handlePostDeleted} />\n//         </div>\n//       ))}\n//       {successMessageVisible && <p>{successMessage}</p>}\n//     </div>\n//   );\n// };\n\n// export default MyProfile;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Navbar from \"../Components/Layouts/Navbar\";\nimport CreatePostForm from \"./Post/CreatePostForm\";\nimport DeletePost from \"./Post/DeletePost\";\nimport EditPost from \"./Post/EditPost\";\nimport Posts from \"./Posts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyProfile = () => {\n  _s();\n  const [avatarURL, setAvatarURL] = useState(\"\");\n  const [bannerURL, setBannerURL] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [showCreatePostForm, setShowCreatePostForm] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n  const updatePosts = newPost => {\n    setPosts([newPost, ...posts]);\n  };\n  const profileName = localStorage.getItem(\"userName\");\n  useEffect(() => {\n    const storedAvatarURL = localStorage.getItem(\"avatarURL\");\n    if (storedAvatarURL) {\n      setAvatarURL(storedAvatarURL);\n    }\n    const storedBannerURL = localStorage.getItem(\"bannerURL\");\n    if (storedBannerURL) {\n      setBannerURL(storedBannerURL);\n    }\n    const fetchUserPosts = async () => {\n      try {\n        const authToken = localStorage.getItem(\"accessToken\");\n        const response = await fetch(`https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/posts`, {\n          headers: {\n            Authorization: `Bearer ${authToken}`\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch user's posts\");\n        }\n        const postData = await response.json();\n        setPosts(postData);\n      } catch (error) {\n        console.error(\"Error fetching user's posts:\", error);\n        setError(\"Failed to fetch user's posts\");\n      }\n    };\n    fetchUserPosts();\n  }, [profileName]);\n  const handleAvatarURLChange = event => {\n    setAvatarURL(event.target.value);\n  };\n  const handleBannerURLChange = event => {\n    setBannerURL(event.target.value);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(`https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/media`, {\n        method: \"PUT\",\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          avatar: avatarURL,\n          banner: bannerURL\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update profile media\");\n      }\n      localStorage.setItem(\"avatarURL\", avatarURL);\n      localStorage.setItem(\"bannerURL\", bannerURL);\n      console.log(\"Avatar and Banner URLs updated successfully!\");\n    } catch (error) {\n      console.error(\"Error updating profile media:\", error);\n      setError(\"Failed to update profile media\");\n    }\n  };\n  const handleCreatePostClick = () => {\n    setShowCreatePostForm(true);\n  };\n  const handlePostCreate = async postData => {\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(`https://nf-api.onrender.com/api/v1/social/posts`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(postData)\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to create post\");\n      }\n      const createdPost = await response.json();\n      setPosts([...posts, createdPost]);\n      setSuccessMessage(\"Post created successfully!\");\n      setSuccessMessageVisible(true);\n    } catch (error) {\n      console.error(\"Error creating post:\", error);\n      setError(\"Failed to create post\");\n    }\n  };\n  const handlePostDeleted = async postId => {\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(`https://nf-api.onrender.com/api/v1/social/posts/${postId}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n      if (response.ok || response.status === 204) {\n        setPosts(posts.filter(post => post.id !== postId));\n        setSuccessMessage(\"Post deleted successfully!\");\n        setSuccessMessageVisible(true);\n      } else {\n        throw new Error(\"Failed to delete post\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting post:\", error);\n      setError(\"Failed to delete post\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"avatarURL\",\n          children: \"Avatar URL:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"avatarURL\",\n          value: avatarURL,\n          onChange: handleAvatarURLChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"bannerURL\",\n          children: \"Banner URL:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"bannerURL\",\n          value: bannerURL,\n          onChange: handleBannerURLChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreatePostClick,\n      children: \"Create Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 7\n    }, this), showCreatePostForm && /*#__PURE__*/_jsxDEV(CreatePostForm, {\n      updatePosts: updatePosts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/posts\",\n      children: \"View Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 7\n    }, this), avatarURL && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Avatar Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: avatarURL,\n        alt: \"Avatar\",\n        style: {\n          width: \"200px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 9\n    }, this), bannerURL && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Banner Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: bannerURL,\n        alt: \"Banner\",\n        style: {\n          width: \"400px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 568,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Posts:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 7\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(EditPost, {\n        postId: post.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DeletePost, {\n        postId: post.id,\n        onPostDeleted: handlePostDeleted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 11\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 9\n    }, this)), successMessageVisible && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 530,\n    columnNumber: 5\n  }, this);\n};\n_s(MyProfile, \"MekvRBuNCjf9ip6HFjJLAXrZwD4=\");\n_c = MyProfile;\nexport default MyProfile;\nvar _c;\n$RefreshReg$(_c, \"MyProfile\");","map":{"version":3,"names":["React","useState","useEffect","Link","Navbar","CreatePostForm","DeletePost","EditPost","Posts","jsxDEV","_jsxDEV","MyProfile","_s","avatarURL","setAvatarURL","bannerURL","setBannerURL","error","setError","showCreatePostForm","setShowCreatePostForm","posts","setPosts","successMessage","setSuccessMessage","successMessageVisible","setSuccessMessageVisible","updatePosts","newPost","profileName","localStorage","getItem","storedAvatarURL","storedBannerURL","fetchUserPosts","authToken","response","fetch","headers","Authorization","ok","Error","postData","json","console","handleAvatarURLChange","event","target","value","handleBannerURLChange","handleSubmit","preventDefault","method","body","JSON","stringify","avatar","banner","setItem","log","handleCreatePostClick","handlePostCreate","createdPost","handlePostDeleted","postId","status","filter","post","id","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","onChange","onClick","to","src","alt","style","width","map","title","onPostDeleted","_c","$RefreshReg$"],"sources":["/Users/ecf/holi-exam/src/Pages/MyProfile.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import CreatePostForm from \"./Post/CreatePostForm\";\n// import DeletePost from \"./Post/DeletePost\";\n// import EditPost from \"./Post/EditPost\";\n\n// const MyProfile = () => {\n//   const [avatarURL, setAvatarURL] = useState(\"\");\n//   const [bannerURL, setBannerURL] = useState(\"\");\n//   const [error, setError] = useState(null);\n//   const [showCreatePostForm, setShowCreatePostForm] = useState(false);\n//   const [posts, setPosts] = useState([]);\n//   const [successMessage, setSuccessMessage] = useState(\"\");\n//   const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n\n//   const profileName = localStorage.getItem(\"userName\");\n\n//   useEffect(() => {\n//     const storedAvatarURL = localStorage.getItem(\"avatarURL\");\n//     if (storedAvatarURL) {\n//       setAvatarURL(storedAvatarURL);\n//     }\n\n//     const storedBannerURL = localStorage.getItem(\"bannerURL\");\n//     if (storedBannerURL) {\n//       setBannerURL(storedBannerURL);\n//     }\n\n//     const fetchUserPosts = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/posts`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch user's posts\");\n//         }\n//         const postData = await response.json();\n//         setPosts(postData);\n//       } catch (error) {\n//         console.error(\"Error fetching user's posts:\", error);\n//         setError(\"Failed to fetch user's posts\");\n//       }\n//     };\n\n//     fetchUserPosts();\n//   }, []);\n\n//   const handleAvatarURLChange = (event) => {\n//     setAvatarURL(event.target.value);\n//   };\n\n//   const handleBannerURLChange = (event) => {\n//     setBannerURL(event.target.value);\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/media`,\n//         {\n//           method: \"PUT\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             avatar: avatarURL,\n//             banner: bannerURL,\n//           }),\n//         }\n//       );\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to update profile media\");\n//       }\n\n//       localStorage.setItem(\"avatarURL\", avatarURL);\n//       localStorage.setItem(\"bannerURL\", bannerURL);\n\n//       console.log(\"Avatar and Banner URLs updated successfully!\");\n//     } catch (error) {\n//       console.error(\"Error updating profile media:\", error);\n//       setError(\"Failed to update profile media\");\n//     }\n//   };\n\n//   const handleCreatePostClick = () => {\n//     setShowCreatePostForm(true);\n//   };\n\n//   const handlePostDeleted = async (postId) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n//         {\n//           method: \"DELETE\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n\n//       if (response.ok || response.status === 204) {\n//         setPosts(posts.filter((post) => post.id !== postId));\n//         setSuccessMessage(\"Post deleted successfully!\");\n//         setSuccessMessageVisible(true);\n//       } else {\n//         throw new Error(\"Failed to delete post\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       setError(\"Failed to delete post\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label htmlFor=\"avatarURL\">Avatar URL:</label>\n//           <input\n//             type=\"text\"\n//             id=\"avatarURL\"\n//             value={avatarURL}\n//             onChange={handleAvatarURLChange}\n//           />\n//         </div>\n//         <div>\n//           <label htmlFor=\"bannerURL\">Banner URL:</label>\n//           <input\n//             type=\"text\"\n//             id=\"bannerURL\"\n//             value={bannerURL}\n//             onChange={handleBannerURLChange}\n//           />\n//         </div>\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//       <button onClick={handleCreatePostClick}>Create Post</button>\n//       {showCreatePostForm && <CreatePostForm />}\n//       <Link to=\"/posts\">View Posts</Link>\n//       {avatarURL && (\n//         <div>\n//           <h2>Avatar Preview</h2>\n//           <img src={avatarURL} alt=\"Avatar\" style={{ width: \"200px\" }} />\n//         </div>\n//       )}\n//       {bannerURL && (\n//         <div>\n//           <h2>Banner Preview</h2>\n//           <img src={bannerURL} alt=\"Banner\" style={{ width: \"400px\" }} />\n//         </div>\n//       )}\n//       {error && <p>Error: {error}</p>}\n//       <h2>Your Posts:</h2>\n//       {posts.map((post) => (\n//         <div key={post.id}>\n//           <h3>{post.title}</h3>\n//           <p>{post.body}</p>\n//           <EditPost postId={post.id} />\n//           <DeletePost postId={post.id} onPostDeleted={handlePostDeleted} />\n//         </div>\n//       ))}\n//       {successMessageVisible && <p>{successMessage}</p>}\n//     </div>\n//   );\n// };\n\n// export default MyProfile;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import CreatePostForm from \"./Post/CreatePostForm\";\n// import DeletePost from \"./Post/DeletePost\";\n// import EditPost from \"./Post/EditPost\";\n\n// const MyProfile = () => {\n//   const [avatarURL, setAvatarURL] = useState(\"\");\n//   const [bannerURL, setBannerURL] = useState(\"\");\n//   const [error, setError] = useState(null);\n//   const [showCreatePostForm, setShowCreatePostForm] = useState(false);\n//   const [posts, setPosts] = useState([]);\n//   const [successMessage, setSuccessMessage] = useState(\"\");\n//   const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n\n//   const profileName = localStorage.getItem(\"userName\");\n\n//   useEffect(() => {\n//     const storedAvatarURL = localStorage.getItem(\"avatarURL\");\n//     if (storedAvatarURL) {\n//       setAvatarURL(storedAvatarURL);\n//     }\n\n//     const storedBannerURL = localStorage.getItem(\"bannerURL\");\n//     if (storedBannerURL) {\n//       setBannerURL(storedBannerURL);\n//     }\n\n//     const fetchUserPosts = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/posts`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch user's posts\");\n//         }\n//         const postData = await response.json();\n//         setPosts(postData);\n//       } catch (error) {\n//         console.error(\"Error fetching user's posts:\", error);\n//         setError(\"Failed to fetch user's posts\");\n//       }\n//     };\n\n//     fetchUserPosts();\n//   }, []);\n\n//   const handleAvatarURLChange = (event) => {\n//     setAvatarURL(event.target.value);\n//   };\n\n//   const handleBannerURLChange = (event) => {\n//     setBannerURL(event.target.value);\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/media`,\n//         {\n//           method: \"PUT\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             avatar: avatarURL,\n//             banner: bannerURL,\n//           }),\n//         }\n//       );\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to update profile media\");\n//       }\n\n//       localStorage.setItem(\"avatarURL\", avatarURL);\n//       localStorage.setItem(\"bannerURL\", bannerURL);\n\n//       console.log(\"Avatar and Banner URLs updated successfully!\");\n//     } catch (error) {\n//       console.error(\"Error updating profile media:\", error);\n//       setError(\"Failed to update profile media\");\n//     }\n//   };\n\n//   const handleCreatePostClick = () => {\n//     setShowCreatePostForm(true);\n//   };\n\n//   const handlePostDeleted = async (postId) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n//         {\n//           method: \"DELETE\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n\n//       if (response.ok || response.status === 204) {\n//         setPosts(posts.filter((post) => post.id !== postId));\n//         setSuccessMessage(\"Post deleted successfully!\");\n//         setSuccessMessageVisible(true);\n//       } else {\n//         throw new Error(\"Failed to delete post\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       setError(\"Failed to delete post\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       {bannerURL && (\n//         <div>\n//           <h2>Banner Preview</h2>\n//           <img src={bannerURL} alt=\"Banner\" style={{ width: \"400px\" }} />\n//         </div>\n//       )}\n//       {avatarURL && (\n//         <div>\n//           <h2>Avatar Preview</h2>\n//           <img src={avatarURL} alt=\"Avatar\" style={{ width: \"200px\" }} />\n//         </div>\n//       )}\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label htmlFor=\"avatarURL\">Avatar URL:</label>\n//           <input\n//             type=\"text\"\n//             id=\"avatarURL\"\n//             value={avatarURL}\n//             onChange={handleAvatarURLChange}\n//           />\n//         </div>\n//         <div>\n//           <label htmlFor=\"bannerURL\">Banner URL:</label>\n//           <input\n//             type=\"text\"\n//             id=\"bannerURL\"\n//             value={bannerURL}\n//             onChange={handleBannerURLChange}\n//           />\n//         </div>\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//       <button onClick={handleCreatePostClick}>Create Post</button>\n//       {showCreatePostForm && <CreatePostForm />}\n//       <Link to=\"/posts\">View Posts</Link>\n//       {error && <p>Error: {error}</p>}\n//       <h2>Your Posts:</h2>\n//       {posts.map((post) => (\n//         <div key={post.id}>\n//           <h3>{post.title}</h3>\n//           <p>{post.body}</p>\n//           <EditPost postId={post.id} />\n//           <DeletePost postId={post.id} onPostDeleted={handlePostDeleted} />\n//         </div>\n//       ))}\n//       {successMessageVisible && <p>{successMessage}</p>}\n//     </div>\n//   );\n// };\n\n// export default MyProfile;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Navbar from \"../Components/Layouts/Navbar\";\nimport CreatePostForm from \"./Post/CreatePostForm\";\nimport DeletePost from \"./Post/DeletePost\";\nimport EditPost from \"./Post/EditPost\";\nimport Posts from \"./Posts\";\n\nconst MyProfile = () => {\n  const [avatarURL, setAvatarURL] = useState(\"\");\n  const [bannerURL, setBannerURL] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [showCreatePostForm, setShowCreatePostForm] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n\n  const updatePosts = (newPost) => {\n    setPosts([newPost, ...posts]);\n  };\n\n  const profileName = localStorage.getItem(\"userName\");\n\n  useEffect(() => {\n    const storedAvatarURL = localStorage.getItem(\"avatarURL\");\n    if (storedAvatarURL) {\n      setAvatarURL(storedAvatarURL);\n    }\n\n    const storedBannerURL = localStorage.getItem(\"bannerURL\");\n    if (storedBannerURL) {\n      setBannerURL(storedBannerURL);\n    }\n\n    const fetchUserPosts = async () => {\n      try {\n        const authToken = localStorage.getItem(\"accessToken\");\n        const response = await fetch(\n          `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/posts`,\n          {\n            headers: {\n              Authorization: `Bearer ${authToken}`,\n            },\n          }\n        );\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch user's posts\");\n        }\n        const postData = await response.json();\n        setPosts(postData);\n      } catch (error) {\n        console.error(\"Error fetching user's posts:\", error);\n        setError(\"Failed to fetch user's posts\");\n      }\n    };\n\n    fetchUserPosts();\n  }, [profileName]);\n\n  const handleAvatarURLChange = (event) => {\n    setAvatarURL(event.target.value);\n  };\n\n  const handleBannerURLChange = (event) => {\n    setBannerURL(event.target.value);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n\n      const response = await fetch(\n        `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/media`,\n        {\n          method: \"PUT\",\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            avatar: avatarURL,\n            banner: bannerURL,\n          }),\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to update profile media\");\n      }\n\n      localStorage.setItem(\"avatarURL\", avatarURL);\n      localStorage.setItem(\"bannerURL\", bannerURL);\n\n      console.log(\"Avatar and Banner URLs updated successfully!\");\n    } catch (error) {\n      console.error(\"Error updating profile media:\", error);\n      setError(\"Failed to update profile media\");\n    }\n  };\n\n  const handleCreatePostClick = () => {\n    setShowCreatePostForm(true);\n  };\n\n  const handlePostCreate = async (postData) => {\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(\n        `https://nf-api.onrender.com/api/v1/social/posts`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(postData),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to create post\");\n      }\n      const createdPost = await response.json();\n\n      setPosts([...posts, createdPost]);\n\n      setSuccessMessage(\"Post created successfully!\");\n      setSuccessMessageVisible(true);\n    } catch (error) {\n      console.error(\"Error creating post:\", error);\n      setError(\"Failed to create post\");\n    }\n  };\n\n  const handlePostDeleted = async (postId) => {\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(\n        `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n        {\n          method: \"DELETE\",\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n          },\n        }\n      );\n      if (response.ok || response.status === 204) {\n        setPosts(posts.filter((post) => post.id !== postId));\n        setSuccessMessage(\"Post deleted successfully!\");\n        setSuccessMessageVisible(true);\n      } else {\n        throw new Error(\"Failed to delete post\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting post:\", error);\n      setError(\"Failed to delete post\");\n    }\n  };\n\n  return (\n    <div>\n      <Navbar />\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"avatarURL\">Avatar URL:</label>\n          <input\n            type=\"text\"\n            id=\"avatarURL\"\n            value={avatarURL}\n            onChange={handleAvatarURLChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"bannerURL\">Banner URL:</label>\n          <input\n            type=\"text\"\n            id=\"bannerURL\"\n            value={bannerURL}\n            onChange={handleBannerURLChange}\n          />\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n      <button onClick={handleCreatePostClick}>Create Post</button>\n      {showCreatePostForm && <CreatePostForm updatePosts={updatePosts} />}\n      <Link to=\"/posts\">View Posts</Link>\n      {avatarURL && (\n        <div>\n          <h2>Avatar Preview</h2>\n          <img src={avatarURL} alt=\"Avatar\" style={{ width: \"200px\" }} />\n        </div>\n      )}\n      {bannerURL && (\n        <div>\n          <h2>Banner Preview</h2>\n          <img src={bannerURL} alt=\"Banner\" style={{ width: \"400px\" }} />\n        </div>\n      )}\n      {error && <p>Error: {error}</p>}\n      <h2>Your Posts:</h2>\n      {posts.map((post) => (\n        <div key={post.id}>\n          <h3>{post.title}</h3>\n          <p>{post.body}</p>\n          <EditPost postId={post.id} />\n          <DeletePost postId={post.id} onPostDeleted={handlePostDeleted} />\n        </div>\n      ))}\n      {successMessageVisible && <p>{successMessage}</p>}\n    </div>\n  );\n};\n\nexport default MyProfile;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}