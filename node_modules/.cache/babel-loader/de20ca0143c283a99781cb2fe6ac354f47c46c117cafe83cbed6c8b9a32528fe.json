{"ast":null,"code":"var _jsxFileName = \"/Users/ecf/holi-exam/src/Pages/PostSpecific.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from \"react\";\n// // import { useParams } from \"react-router-dom\";\n// // import Navbar from \"../Components/Layouts/Navbar\";\n\n// // const PostSpecific = () => {\n// //   const { id } = useParams();\n// //   const [post, setPost] = useState(null);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchPost = async () => {\n// //       try {\n// //         const authToken = localStorage.getItem(\"accessToken\");\n// //         const response = await fetch(\n// //           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n// //           {\n// //             headers: {\n// //               Authorization: `Bearer ${authToken}`,\n// //             },\n// //           }\n// //         );\n// //         if (!response.ok) {\n// //           throw new Error(\"Failed to fetch post\");\n// //         }\n// //         const postData = await response.json();\n// //         setPost(postData);\n// //       } catch (error) {\n// //         console.error(\"Error fetching post:\", error);\n// //         setError(error.message);\n// //       }\n// //     };\n\n// //     fetchPost();\n// //   }, [id]);\n\n// //   if (error) {\n// //     return <p>Error: {error}</p>;\n// //   }\n\n// //   if (!post) {\n// //     return <p>Loading...</p>;\n// //   }\n\n// //   return (\n// //     <div>\n// //       <Navbar />\n// //       <div className=\"post-specific-content\">\n// //         <h1>{post.title}</h1>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default PostSpecific;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { useParams } from \"react-router-dom\";\n// // import Navbar from \"../Components/Layouts/Navbar\";\n\n// // const PostSpecific = () => {\n// //   const { id } = useParams();\n// //   const [post, setPost] = useState(null);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchPost = async () => {\n// //       try {\n// //         const authToken = localStorage.getItem(\"accessToken\");\n// //         const response = await fetch(\n// //           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n// //           {\n// //             headers: {\n// //               Authorization: `Bearer ${authToken}`,\n// //             },\n// //           }\n// //         );\n// //         if (!response.ok) {\n// //           if (response.status === 404) {\n// //             setError(\"Post not found\");\n// //           } else {\n// //             throw new Error(\"Failed to fetch post\");\n// //           }\n// //         } else {\n// //           const postData = await response.json();\n// //           setPost(postData);\n// //         }\n// //       } catch (error) {\n// //         console.error(\"Error fetching post:\", error);\n// //         setError(error.message);\n// //       }\n// //     };\n\n// //     fetchPost();\n// //   }, [id]);\n\n// //   if (error) {\n// //     return <p>Error: {error}</p>;\n// //   }\n\n// //   if (!post) {\n// //     return <p>Loading...</p>;\n// //   }\n\n// //   return (\n// //     <div>\n// //       <Navbar />\n// //       <div className=\"post-specific-content\">\n// //         <h1>{post.title}</h1>\n// //         <p>{post.body}</p>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default PostSpecific;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { useParams, Link } from \"react-router-dom\";\n// // import Navbar from \"../Components/Layouts/Navbar\";\n\n// // const PostSpecific = () => {\n// //   const { id } = useParams();\n// //   const [post, setPost] = useState(null);\n// //   const [error, setError] = useState(null);\n// //   const [commentInput, setCommentInput] = useState(\"\");\n\n// //   useEffect(() => {\n// //     const fetchPost = async () => {\n// //       try {\n// //         const authToken = localStorage.getItem(\"accessToken\");\n// //         const response = await fetch(\n// //           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n// //           {\n// //             headers: {\n// //               Authorization: `Bearer ${authToken}`,\n// //             },\n// //           }\n// //         );\n// //         if (!response.ok) {\n// //           if (response.status === 404) {\n// //             setError(\"Post not found\");\n// //           } else {\n// //             throw new Error(\"Failed to fetch post\");\n// //           }\n// //         } else {\n// //           const postData = await response.json();\n// //           setPost(postData);\n// //         }\n// //       } catch (error) {\n// //         console.error(\"Error fetching post:\", error);\n// //         setError(error.message);\n// //       }\n// //     };\n\n// //     fetchPost();\n// //   }, [id]);\n\n// //   const handleCommentSubmit = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment`,\n// //         {\n// //           method: \"POST\",\n// //           headers: {\n// //             \"Content-Type\": \"application/json\",\n// //             Authorization: `Bearer ${authToken}`,\n// //           },\n// //           body: JSON.stringify({ body: commentInput }),\n// //         }\n// //       );\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to submit comment\");\n// //       }\n// //       console.log(\"Comment submitted successfully!\");\n// //       const updatedPostData = await response.json();\n// //       setPost((prevPost) => ({\n// //         ...prevPost,\n// //         comments: [...(prevPost.comments || []), updatedPostData.comments],\n// //       }));\n// //     } catch (error) {\n// //       console.error(\"Error submitting comment:\", error);\n// //     }\n// //   };\n\n// //   const handleRemoveComment = async (index) => {\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment/${index}`,\n// //         {\n// //           method: \"DELETE\",\n// //           headers: {\n// //             Authorization: `Bearer ${authToken}`,\n// //           },\n// //         }\n// //       );\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to remove comment\");\n// //       }\n// //       console.log(\"Comment removed successfully!\");\n// //       const postData = await response.json();\n// //       setPost(postData);\n// //     } catch (error) {\n// //       console.error(\"Error removing comment:\", error);\n// //     }\n// //   };\n\n// //   const handleReactToPost = async () => {\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/posts/${id}/react`,\n// //         {\n// //           method: \"POST\",\n// //           headers: {\n// //             \"Content-Type\": \"application/json\",\n// //             Authorization: `Bearer ${authToken}`,\n// //           },\n// //         }\n// //       );\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to react to post\");\n// //       }\n// //       console.log(\"Reacted to post successfully!\");\n// //       const postData = await response.json();\n// //       setPost(postData);\n// //     } catch (error) {\n// //       console.error(\"Error reacting to post:\", error);\n// //     }\n// //   };\n\n// //   const handleCommentInputChange = (e) => {\n// //     setCommentInput(e.target.value);\n// //   };\n\n// //   if (error) {\n// //     return <p>Error: {error}</p>;\n// //   }\n\n// //   if (!post) {\n// //     return <p>Loading...</p>;\n// //   }\n\n// //   return (\n// //     <div>\n// //       <Navbar />\n// //       <div className=\"post-specific-content\">\n// //         <h1>{post.title}</h1>\n// //         <p>{post.body}</p>\n// //         <button\n// //           onClick={handleReactToPost}\n// //           className=\"btn btn-link float-end\"\n// //           style={{ fontSize: \"1.2rem\" }}\n// //         >\n// //           {post.reacted ? (\n// //             <i className=\"bi bi-heart-fill text-danger\"></i>\n// //           ) : (\n// //             <i className=\"bi bi-heart text-danger\"></i>\n// //           )}\n// //         </button>\n// //         <form onSubmit={handleCommentSubmit}>\n// //           <div className=\"form-group\">\n// //             <textarea\n// //               className=\"form-control\"\n// //               rows=\"3\"\n// //               value={commentInput}\n// //               onChange={handleCommentInputChange}\n// //               placeholder=\"Write a comment...\"\n// //             />\n// //           </div>\n// //           <button type=\"submit\" className=\"btn btn-primary\">\n// //             Submit\n// //           </button>\n// //         </form>\n// //         {post.comments && (\n// //           <ul className=\"list-group list-group-flush\">\n// //             {post.comments.map((comment, index) => (\n// //               <li key={index} className=\"list-group-item\">\n// //                 {comment && comment.body && comment.body.trim()}\n// //                 <button\n// //                   className=\"btn btn-link float-end\"\n// //                   onClick={() => handleRemoveComment(post.id, index)}\n// //                 >\n// //                   <i className=\"bi bi-x text-danger\"></i>\n// //                 </button>\n// //               </li>\n// //             ))}\n// //           </ul>\n// //         )}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default PostSpecific;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { useParams } from \"react-router-dom\";\n// // import Navbar from \"../Components/Layouts/Navbar\";\n\n// // const PostSpecific = () => {\n// //   const { id } = useParams();\n// //   const [post, setPost] = useState(null);\n// //   const [error, setError] = useState(null);\n// //   const [commentInputs, setCommentInputs] = useState({});\n// //   const [comments, setComments] = useState([]);\n\n// //   useEffect(() => {\n// //     const fetchPost = async () => {\n// //       try {\n// //         const authToken = localStorage.getItem(\"accessToken\");\n// //         const response = await fetch(\n// //           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n// //           {\n// //             headers: {\n// //               Authorization: `Bearer ${authToken}`,\n// //             },\n// //           }\n// //         );\n// //         if (!response.ok) {\n// //           throw new Error(\"Failed to fetch post\");\n// //         }\n// //         const postData = await response.json();\n// //         setPost(postData);\n// //       } catch (error) {\n// //         console.error(\"Error fetching post:\", error);\n// //         setError(error.message);\n// //       }\n// //     };\n\n// //     fetchPost();\n\n// //     const storedComments = JSON.parse(\n// //       localStorage.getItem(`post_${id}_comments`)\n// //     );\n// //     if (storedComments) {\n// //       setComments(storedComments);\n// //     }\n// //   }, [id]);\n\n// //   const handleCommentSubmit = async (comment) => {\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment`,\n// //         {\n// //           method: \"POST\",\n// //           headers: {\n// //             \"Content-Type\": \"application/json\",\n// //             Authorization: `Bearer ${authToken}`,\n// //           },\n// //           body: JSON.stringify({ body: comment }),\n// //         }\n// //       );\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to submit comment\");\n// //       }\n// //       console.log(\"Comment submitted successfully!\");\n\n// //       const newComments = [...comments, { body: comment }];\n// //       setComments(newComments);\n\n// //       localStorage.setItem(`post_${id}_comments`, JSON.stringify(newComments));\n\n// //       clearCommentInput();\n// //     } catch (error) {\n// //       console.error(\"Error submitting comment:\", error);\n// //     }\n// //   };\n\n// //   const handleCommentInputChange = (value) => {\n// //     setCommentInputs(value);\n// //   };\n\n// //   const clearCommentInput = () => {\n// //     setCommentInputs(\"\");\n// //   };\n\n// //   const handleRemoveComment = (index) => {\n// //     const updatedComments = [...comments];\n// //     updatedComments.splice(index, 1);\n// //     setComments(updatedComments);\n// //     localStorage.setItem(\n// //       `post_${id}_comments`,\n// //       JSON.stringify(updatedComments)\n// //     );\n// //   };\n\n// //   if (error) {\n// //     return <p>Error: {error}</p>;\n// //   }\n\n// //   if (!post) {\n// //     return <p>Loading...</p>;\n// //   }\n\n// //   return (\n// //     <div>\n// //       <Navbar />\n// //       <div className=\"post-specific-content\">\n// //         <h1>{post.title}</h1>\n// //         <div>\n// //           <ul>\n// //             {comments.map((comment, index) => (\n// //               <li key={index}>\n// //                 {comment.body}\n// //                 <button onClick={() => handleRemoveComment(index)}>\n// //                   Delete\n// //                 </button>\n// //               </li>\n// //             ))}\n// //           </ul>\n// //           <form\n// //             onSubmit={(e) => {\n// //               e.preventDefault();\n// //               handleCommentSubmit(commentInputs);\n// //             }}\n// //           >\n// //             <textarea\n// //               value={commentInputs}\n// //               onChange={(e) => handleCommentInputChange(e.target.value)}\n// //             />\n// //             <button type=\"submit\">Submit</button>\n// //           </form>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default PostSpecific;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { useParams } from \"react-router-dom\";\n// // import Navbar from \"../Components/Layouts/Navbar\";\n// // import \"./Posts.css\";\n\n// // const PostSpecific = () => {\n// //   const { id } = useParams();\n// //   const [post, setPost] = useState(null);\n// //   const [error, setError] = useState(null);\n// //   const [commentInputs, setCommentInputs] = useState(\"\");\n// //   const [comments, setComments] = useState([]);\n\n// //   useEffect(() => {\n// //     const fetchPost = async () => {\n// //       try {\n// //         const authToken = localStorage.getItem(\"accessToken\");\n// //         const response = await fetch(\n// //           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n// //           {\n// //             headers: {\n// //               Authorization: `Bearer ${authToken}`,\n// //             },\n// //           }\n// //         );\n// //         if (!response.ok) {\n// //           throw new Error(\"Failed to fetch post\");\n// //         }\n// //         const postData = await response.json();\n// //         setPost(postData);\n// //       } catch (error) {\n// //         console.error(\"Error fetching post:\", error);\n// //         setError(error.message);\n// //       }\n// //     };\n\n// //     fetchPost();\n\n// //     const storedComments = JSON.parse(\n// //       localStorage.getItem(`post_${id}_comments`)\n// //     );\n// //     if (storedComments) {\n// //       setComments(storedComments);\n// //     }\n// //   }, [id]);\n\n// //   const handleCommentSubmit = async (comment) => {\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment`,\n// //         {\n// //           method: \"POST\",\n// //           headers: {\n// //             \"Content-Type\": \"application/json\",\n// //             Authorization: `Bearer ${authToken}`,\n// //           },\n// //           body: JSON.stringify({ body: comment }),\n// //         }\n// //       );\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to submit comment\");\n// //       }\n// //       console.log(\"Comment submitted successfully!\");\n\n// //       const newComments = [...comments, { body: comment }];\n// //       setComments(newComments);\n\n// //       localStorage.setItem(`post_${id}_comments`, JSON.stringify(newComments));\n\n// //       clearCommentInput();\n// //     } catch (error) {\n// //       console.error(\"Error submitting comment:\", error);\n// //     }\n// //   };\n\n// //   const handleCommentInputChange = (value) => {\n// //     setCommentInputs(value);\n// //   };\n\n// //   const clearCommentInput = () => {\n// //     setCommentInputs(\"\");\n// //   };\n\n// //   const handleRemoveComment = (index) => {\n// //     const updatedComments = [...comments];\n// //     updatedComments.splice(index, 1);\n// //     setComments(updatedComments);\n// //     localStorage.setItem(\n// //       `post_${id}_comments`,\n// //       JSON.stringify(updatedComments)\n// //     );\n// //   };\n\n// //   if (error) {\n// //     return <p>Error: {error}</p>;\n// //   }\n\n// //   if (!post) {\n// //     return <p>Loading...</p>;\n// //   }\n\n// //   return (\n// //     <div>\n// //       <Navbar />\n// //       <div className=\"post-specific-content\">\n// //         <div className=\"card\">\n// //           <div className=\"card-body\">\n// //             <h1>{post.title}</h1>\n// //             <p className=\"centered\">{post.body}</p>\n// //             <form\n// //               onSubmit={(e) => {\n// //                 e.preventDefault();\n// //                 handleCommentSubmit(commentInputs);\n// //               }}\n// //             >\n// //               <textarea\n// //                 value={commentInputs}\n// //                 onChange={(e) => handleCommentInputChange(e.target.value)}\n// //               />\n// //               <button type=\"submit\">Submit</button>\n// //             </form>\n// //             <div>\n// //               <ul>\n// //                 {comments.map((comment, index) => (\n// //                   <li key={index}>\n// //                     {comment.body}\n// //                     <button onClick={() => handleRemoveComment(index)}>\n// //                       Delete\n// //                     </button>\n// //                   </li>\n// //                 ))}\n// //               </ul>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default PostSpecific;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import \"./Posts.css\";\n\n// const PostSpecific = () => {\n//   const { id } = useParams();\n//   const [post, setPost] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [commentInputs, setCommentInputs] = useState(\"\");\n//   const [comments, setComments] = useState([]);\n\n//   useEffect(() => {\n//     const fetchPost = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch post\");\n//         }\n//         const postData = await response.json();\n//         console.log(\"Post object:\", postData);\n//         setPost(postData);\n//       } catch (error) {\n//         console.error(\"Error fetching post:\", error);\n//         setError(error.message);\n//       }\n//     };\n\n//     fetchPost();\n\n//     const storedComments = JSON.parse(\n//       localStorage.getItem(`post_${id}_comments`)\n//     );\n//     if (storedComments) {\n//       setComments(storedComments);\n//     }\n//   }, [id]);\n\n//   const handleCommentSubmit = async (comment) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: comment }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n\n//       const newComments = [...comments, { body: comment }];\n//       setComments(newComments);\n\n//       localStorage.setItem(`post_${id}_comments`, JSON.stringify(newComments));\n\n//       clearCommentInput();\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   const handleCommentInputChange = (value) => {\n//     setCommentInputs(value);\n//   };\n\n//   const clearCommentInput = () => {\n//     setCommentInputs(\"\");\n//   };\n\n//   const handleRemoveComment = (index) => {\n//     const updatedComments = [...comments];\n//     updatedComments.splice(index, 1);\n//     setComments(updatedComments);\n//     localStorage.setItem(\n//       `post_${id}_comments`,\n//       JSON.stringify(updatedComments)\n//     );\n//   };\n\n//   if (error) {\n//     return <p>Error: {error}</p>;\n//   }\n\n//   if (!post) {\n//     return <p>Loading...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"post-specific-content\">\n//         <div className=\"card\">\n//           <div className=\"card-body\">\n//             <h1>{post.title}</h1>\n//             <p className=\"centered\">{post.body}</p>\n//             <p>Posted by: {post.userName}</p>\n\n//             <form\n//               onSubmit={(e) => {\n//                 e.preventDefault();\n//                 handleCommentSubmit(commentInputs);\n//               }}\n//             >\n//               <textarea\n//                 value={commentInputs}\n//                 onChange={(e) => handleCommentInputChange(e.target.value)}\n//               />\n//               <button type=\"submit\">Submit</button>\n//             </form>\n//             <div>\n//               <ul>\n//                 {comments.map((comment, index) => (\n//                   <li key={index}>\n//                     {comment.body}\n//                     <button onClick={() => handleRemoveComment(index)}>\n//                       Delete\n//                     </button>\n//                   </li>\n//                 ))}\n//               </ul>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PostSpecific;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Navbar from \"../Components/Layouts/Navbar\";\nimport \"./Posts.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostSpecific = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [post, setPost] = useState(null);\n  const [error, setError] = useState(null);\n  const [comments, setComments] = useState([]);\n  useEffect(() => {\n    const fetchPost = async () => {\n      try {\n        const authToken = localStorage.getItem(\"accessToken\");\n        const response = await fetch(`https://nf-api.onrender.com/api/v1/social/posts/${id}`, {\n          headers: {\n            Authorization: `Bearer ${authToken}`\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch post\");\n        }\n        const postData = await response.json();\n        console.log(\"Post object:\", postData);\n        setPost(postData);\n      } catch (error) {\n        console.error(\"Error fetching post:\", error);\n        setError(error.message);\n      }\n    };\n    fetchPost();\n    const storedComments = JSON.parse(localStorage.getItem(`post_${id}_comments`));\n    if (storedComments) {\n      setComments(storedComments);\n    }\n  }, [id]);\n  const handleRemoveComment = index => {\n    const updatedComments = [...comments];\n    updatedComments.splice(index, 1);\n    setComments(updatedComments);\n    localStorage.setItem(`post_${id}_comments`, JSON.stringify(updatedComments));\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 778,\n      columnNumber: 12\n    }, this);\n  }\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 782,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 787,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-specific-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"Title: \", post.title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"centered\",\n            children: [\"Body: \", post.body]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [comment.body, /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleRemoveComment(index),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 798,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 796,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 794,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 793,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 790,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 789,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 786,\n    columnNumber: 5\n  }, this);\n};\n_s(PostSpecific, \"q84Q46eAZ29qfMjq4maEGhmYK8U=\", false, function () {\n  return [useParams];\n});\n_c = PostSpecific;\nexport default PostSpecific;\nvar _c;\n$RefreshReg$(_c, \"PostSpecific\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Navbar","jsxDEV","_jsxDEV","PostSpecific","_s","id","post","setPost","error","setError","comments","setComments","fetchPost","authToken","localStorage","getItem","response","fetch","headers","Authorization","ok","Error","postData","json","console","log","message","storedComments","JSON","parse","handleRemoveComment","index","updatedComments","splice","setItem","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","body","map","comment","onClick","_c","$RefreshReg$"],"sources":["/Users/ecf/holi-exam/src/Pages/PostSpecific.js"],"sourcesContent":["// // import React, { useState, useEffect } from \"react\";\n// // import { useParams } from \"react-router-dom\";\n// // import Navbar from \"../Components/Layouts/Navbar\";\n\n// // const PostSpecific = () => {\n// //   const { id } = useParams();\n// //   const [post, setPost] = useState(null);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchPost = async () => {\n// //       try {\n// //         const authToken = localStorage.getItem(\"accessToken\");\n// //         const response = await fetch(\n// //           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n// //           {\n// //             headers: {\n// //               Authorization: `Bearer ${authToken}`,\n// //             },\n// //           }\n// //         );\n// //         if (!response.ok) {\n// //           throw new Error(\"Failed to fetch post\");\n// //         }\n// //         const postData = await response.json();\n// //         setPost(postData);\n// //       } catch (error) {\n// //         console.error(\"Error fetching post:\", error);\n// //         setError(error.message);\n// //       }\n// //     };\n\n// //     fetchPost();\n// //   }, [id]);\n\n// //   if (error) {\n// //     return <p>Error: {error}</p>;\n// //   }\n\n// //   if (!post) {\n// //     return <p>Loading...</p>;\n// //   }\n\n// //   return (\n// //     <div>\n// //       <Navbar />\n// //       <div className=\"post-specific-content\">\n// //         <h1>{post.title}</h1>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default PostSpecific;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { useParams } from \"react-router-dom\";\n// // import Navbar from \"../Components/Layouts/Navbar\";\n\n// // const PostSpecific = () => {\n// //   const { id } = useParams();\n// //   const [post, setPost] = useState(null);\n// //   const [error, setError] = useState(null);\n\n// //   useEffect(() => {\n// //     const fetchPost = async () => {\n// //       try {\n// //         const authToken = localStorage.getItem(\"accessToken\");\n// //         const response = await fetch(\n// //           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n// //           {\n// //             headers: {\n// //               Authorization: `Bearer ${authToken}`,\n// //             },\n// //           }\n// //         );\n// //         if (!response.ok) {\n// //           if (response.status === 404) {\n// //             setError(\"Post not found\");\n// //           } else {\n// //             throw new Error(\"Failed to fetch post\");\n// //           }\n// //         } else {\n// //           const postData = await response.json();\n// //           setPost(postData);\n// //         }\n// //       } catch (error) {\n// //         console.error(\"Error fetching post:\", error);\n// //         setError(error.message);\n// //       }\n// //     };\n\n// //     fetchPost();\n// //   }, [id]);\n\n// //   if (error) {\n// //     return <p>Error: {error}</p>;\n// //   }\n\n// //   if (!post) {\n// //     return <p>Loading...</p>;\n// //   }\n\n// //   return (\n// //     <div>\n// //       <Navbar />\n// //       <div className=\"post-specific-content\">\n// //         <h1>{post.title}</h1>\n// //         <p>{post.body}</p>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default PostSpecific;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { useParams, Link } from \"react-router-dom\";\n// // import Navbar from \"../Components/Layouts/Navbar\";\n\n// // const PostSpecific = () => {\n// //   const { id } = useParams();\n// //   const [post, setPost] = useState(null);\n// //   const [error, setError] = useState(null);\n// //   const [commentInput, setCommentInput] = useState(\"\");\n\n// //   useEffect(() => {\n// //     const fetchPost = async () => {\n// //       try {\n// //         const authToken = localStorage.getItem(\"accessToken\");\n// //         const response = await fetch(\n// //           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n// //           {\n// //             headers: {\n// //               Authorization: `Bearer ${authToken}`,\n// //             },\n// //           }\n// //         );\n// //         if (!response.ok) {\n// //           if (response.status === 404) {\n// //             setError(\"Post not found\");\n// //           } else {\n// //             throw new Error(\"Failed to fetch post\");\n// //           }\n// //         } else {\n// //           const postData = await response.json();\n// //           setPost(postData);\n// //         }\n// //       } catch (error) {\n// //         console.error(\"Error fetching post:\", error);\n// //         setError(error.message);\n// //       }\n// //     };\n\n// //     fetchPost();\n// //   }, [id]);\n\n// //   const handleCommentSubmit = async (e) => {\n// //     e.preventDefault();\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment`,\n// //         {\n// //           method: \"POST\",\n// //           headers: {\n// //             \"Content-Type\": \"application/json\",\n// //             Authorization: `Bearer ${authToken}`,\n// //           },\n// //           body: JSON.stringify({ body: commentInput }),\n// //         }\n// //       );\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to submit comment\");\n// //       }\n// //       console.log(\"Comment submitted successfully!\");\n// //       const updatedPostData = await response.json();\n// //       setPost((prevPost) => ({\n// //         ...prevPost,\n// //         comments: [...(prevPost.comments || []), updatedPostData.comments],\n// //       }));\n// //     } catch (error) {\n// //       console.error(\"Error submitting comment:\", error);\n// //     }\n// //   };\n\n// //   const handleRemoveComment = async (index) => {\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment/${index}`,\n// //         {\n// //           method: \"DELETE\",\n// //           headers: {\n// //             Authorization: `Bearer ${authToken}`,\n// //           },\n// //         }\n// //       );\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to remove comment\");\n// //       }\n// //       console.log(\"Comment removed successfully!\");\n// //       const postData = await response.json();\n// //       setPost(postData);\n// //     } catch (error) {\n// //       console.error(\"Error removing comment:\", error);\n// //     }\n// //   };\n\n// //   const handleReactToPost = async () => {\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/posts/${id}/react`,\n// //         {\n// //           method: \"POST\",\n// //           headers: {\n// //             \"Content-Type\": \"application/json\",\n// //             Authorization: `Bearer ${authToken}`,\n// //           },\n// //         }\n// //       );\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to react to post\");\n// //       }\n// //       console.log(\"Reacted to post successfully!\");\n// //       const postData = await response.json();\n// //       setPost(postData);\n// //     } catch (error) {\n// //       console.error(\"Error reacting to post:\", error);\n// //     }\n// //   };\n\n// //   const handleCommentInputChange = (e) => {\n// //     setCommentInput(e.target.value);\n// //   };\n\n// //   if (error) {\n// //     return <p>Error: {error}</p>;\n// //   }\n\n// //   if (!post) {\n// //     return <p>Loading...</p>;\n// //   }\n\n// //   return (\n// //     <div>\n// //       <Navbar />\n// //       <div className=\"post-specific-content\">\n// //         <h1>{post.title}</h1>\n// //         <p>{post.body}</p>\n// //         <button\n// //           onClick={handleReactToPost}\n// //           className=\"btn btn-link float-end\"\n// //           style={{ fontSize: \"1.2rem\" }}\n// //         >\n// //           {post.reacted ? (\n// //             <i className=\"bi bi-heart-fill text-danger\"></i>\n// //           ) : (\n// //             <i className=\"bi bi-heart text-danger\"></i>\n// //           )}\n// //         </button>\n// //         <form onSubmit={handleCommentSubmit}>\n// //           <div className=\"form-group\">\n// //             <textarea\n// //               className=\"form-control\"\n// //               rows=\"3\"\n// //               value={commentInput}\n// //               onChange={handleCommentInputChange}\n// //               placeholder=\"Write a comment...\"\n// //             />\n// //           </div>\n// //           <button type=\"submit\" className=\"btn btn-primary\">\n// //             Submit\n// //           </button>\n// //         </form>\n// //         {post.comments && (\n// //           <ul className=\"list-group list-group-flush\">\n// //             {post.comments.map((comment, index) => (\n// //               <li key={index} className=\"list-group-item\">\n// //                 {comment && comment.body && comment.body.trim()}\n// //                 <button\n// //                   className=\"btn btn-link float-end\"\n// //                   onClick={() => handleRemoveComment(post.id, index)}\n// //                 >\n// //                   <i className=\"bi bi-x text-danger\"></i>\n// //                 </button>\n// //               </li>\n// //             ))}\n// //           </ul>\n// //         )}\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default PostSpecific;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { useParams } from \"react-router-dom\";\n// // import Navbar from \"../Components/Layouts/Navbar\";\n\n// // const PostSpecific = () => {\n// //   const { id } = useParams();\n// //   const [post, setPost] = useState(null);\n// //   const [error, setError] = useState(null);\n// //   const [commentInputs, setCommentInputs] = useState({});\n// //   const [comments, setComments] = useState([]);\n\n// //   useEffect(() => {\n// //     const fetchPost = async () => {\n// //       try {\n// //         const authToken = localStorage.getItem(\"accessToken\");\n// //         const response = await fetch(\n// //           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n// //           {\n// //             headers: {\n// //               Authorization: `Bearer ${authToken}`,\n// //             },\n// //           }\n// //         );\n// //         if (!response.ok) {\n// //           throw new Error(\"Failed to fetch post\");\n// //         }\n// //         const postData = await response.json();\n// //         setPost(postData);\n// //       } catch (error) {\n// //         console.error(\"Error fetching post:\", error);\n// //         setError(error.message);\n// //       }\n// //     };\n\n// //     fetchPost();\n\n// //     const storedComments = JSON.parse(\n// //       localStorage.getItem(`post_${id}_comments`)\n// //     );\n// //     if (storedComments) {\n// //       setComments(storedComments);\n// //     }\n// //   }, [id]);\n\n// //   const handleCommentSubmit = async (comment) => {\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment`,\n// //         {\n// //           method: \"POST\",\n// //           headers: {\n// //             \"Content-Type\": \"application/json\",\n// //             Authorization: `Bearer ${authToken}`,\n// //           },\n// //           body: JSON.stringify({ body: comment }),\n// //         }\n// //       );\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to submit comment\");\n// //       }\n// //       console.log(\"Comment submitted successfully!\");\n\n// //       const newComments = [...comments, { body: comment }];\n// //       setComments(newComments);\n\n// //       localStorage.setItem(`post_${id}_comments`, JSON.stringify(newComments));\n\n// //       clearCommentInput();\n// //     } catch (error) {\n// //       console.error(\"Error submitting comment:\", error);\n// //     }\n// //   };\n\n// //   const handleCommentInputChange = (value) => {\n// //     setCommentInputs(value);\n// //   };\n\n// //   const clearCommentInput = () => {\n// //     setCommentInputs(\"\");\n// //   };\n\n// //   const handleRemoveComment = (index) => {\n// //     const updatedComments = [...comments];\n// //     updatedComments.splice(index, 1);\n// //     setComments(updatedComments);\n// //     localStorage.setItem(\n// //       `post_${id}_comments`,\n// //       JSON.stringify(updatedComments)\n// //     );\n// //   };\n\n// //   if (error) {\n// //     return <p>Error: {error}</p>;\n// //   }\n\n// //   if (!post) {\n// //     return <p>Loading...</p>;\n// //   }\n\n// //   return (\n// //     <div>\n// //       <Navbar />\n// //       <div className=\"post-specific-content\">\n// //         <h1>{post.title}</h1>\n// //         <div>\n// //           <ul>\n// //             {comments.map((comment, index) => (\n// //               <li key={index}>\n// //                 {comment.body}\n// //                 <button onClick={() => handleRemoveComment(index)}>\n// //                   Delete\n// //                 </button>\n// //               </li>\n// //             ))}\n// //           </ul>\n// //           <form\n// //             onSubmit={(e) => {\n// //               e.preventDefault();\n// //               handleCommentSubmit(commentInputs);\n// //             }}\n// //           >\n// //             <textarea\n// //               value={commentInputs}\n// //               onChange={(e) => handleCommentInputChange(e.target.value)}\n// //             />\n// //             <button type=\"submit\">Submit</button>\n// //           </form>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default PostSpecific;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { useParams } from \"react-router-dom\";\n// // import Navbar from \"../Components/Layouts/Navbar\";\n// // import \"./Posts.css\";\n\n// // const PostSpecific = () => {\n// //   const { id } = useParams();\n// //   const [post, setPost] = useState(null);\n// //   const [error, setError] = useState(null);\n// //   const [commentInputs, setCommentInputs] = useState(\"\");\n// //   const [comments, setComments] = useState([]);\n\n// //   useEffect(() => {\n// //     const fetchPost = async () => {\n// //       try {\n// //         const authToken = localStorage.getItem(\"accessToken\");\n// //         const response = await fetch(\n// //           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n// //           {\n// //             headers: {\n// //               Authorization: `Bearer ${authToken}`,\n// //             },\n// //           }\n// //         );\n// //         if (!response.ok) {\n// //           throw new Error(\"Failed to fetch post\");\n// //         }\n// //         const postData = await response.json();\n// //         setPost(postData);\n// //       } catch (error) {\n// //         console.error(\"Error fetching post:\", error);\n// //         setError(error.message);\n// //       }\n// //     };\n\n// //     fetchPost();\n\n// //     const storedComments = JSON.parse(\n// //       localStorage.getItem(`post_${id}_comments`)\n// //     );\n// //     if (storedComments) {\n// //       setComments(storedComments);\n// //     }\n// //   }, [id]);\n\n// //   const handleCommentSubmit = async (comment) => {\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment`,\n// //         {\n// //           method: \"POST\",\n// //           headers: {\n// //             \"Content-Type\": \"application/json\",\n// //             Authorization: `Bearer ${authToken}`,\n// //           },\n// //           body: JSON.stringify({ body: comment }),\n// //         }\n// //       );\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to submit comment\");\n// //       }\n// //       console.log(\"Comment submitted successfully!\");\n\n// //       const newComments = [...comments, { body: comment }];\n// //       setComments(newComments);\n\n// //       localStorage.setItem(`post_${id}_comments`, JSON.stringify(newComments));\n\n// //       clearCommentInput();\n// //     } catch (error) {\n// //       console.error(\"Error submitting comment:\", error);\n// //     }\n// //   };\n\n// //   const handleCommentInputChange = (value) => {\n// //     setCommentInputs(value);\n// //   };\n\n// //   const clearCommentInput = () => {\n// //     setCommentInputs(\"\");\n// //   };\n\n// //   const handleRemoveComment = (index) => {\n// //     const updatedComments = [...comments];\n// //     updatedComments.splice(index, 1);\n// //     setComments(updatedComments);\n// //     localStorage.setItem(\n// //       `post_${id}_comments`,\n// //       JSON.stringify(updatedComments)\n// //     );\n// //   };\n\n// //   if (error) {\n// //     return <p>Error: {error}</p>;\n// //   }\n\n// //   if (!post) {\n// //     return <p>Loading...</p>;\n// //   }\n\n// //   return (\n// //     <div>\n// //       <Navbar />\n// //       <div className=\"post-specific-content\">\n// //         <div className=\"card\">\n// //           <div className=\"card-body\">\n// //             <h1>{post.title}</h1>\n// //             <p className=\"centered\">{post.body}</p>\n// //             <form\n// //               onSubmit={(e) => {\n// //                 e.preventDefault();\n// //                 handleCommentSubmit(commentInputs);\n// //               }}\n// //             >\n// //               <textarea\n// //                 value={commentInputs}\n// //                 onChange={(e) => handleCommentInputChange(e.target.value)}\n// //               />\n// //               <button type=\"submit\">Submit</button>\n// //             </form>\n// //             <div>\n// //               <ul>\n// //                 {comments.map((comment, index) => (\n// //                   <li key={index}>\n// //                     {comment.body}\n// //                     <button onClick={() => handleRemoveComment(index)}>\n// //                       Delete\n// //                     </button>\n// //                   </li>\n// //                 ))}\n// //               </ul>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default PostSpecific;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import \"./Posts.css\";\n\n// const PostSpecific = () => {\n//   const { id } = useParams();\n//   const [post, setPost] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [commentInputs, setCommentInputs] = useState(\"\");\n//   const [comments, setComments] = useState([]);\n\n//   useEffect(() => {\n//     const fetchPost = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch post\");\n//         }\n//         const postData = await response.json();\n//         console.log(\"Post object:\", postData);\n//         setPost(postData);\n//       } catch (error) {\n//         console.error(\"Error fetching post:\", error);\n//         setError(error.message);\n//       }\n//     };\n\n//     fetchPost();\n\n//     const storedComments = JSON.parse(\n//       localStorage.getItem(`post_${id}_comments`)\n//     );\n//     if (storedComments) {\n//       setComments(storedComments);\n//     }\n//   }, [id]);\n\n//   const handleCommentSubmit = async (comment) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: comment }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n\n//       const newComments = [...comments, { body: comment }];\n//       setComments(newComments);\n\n//       localStorage.setItem(`post_${id}_comments`, JSON.stringify(newComments));\n\n//       clearCommentInput();\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   const handleCommentInputChange = (value) => {\n//     setCommentInputs(value);\n//   };\n\n//   const clearCommentInput = () => {\n//     setCommentInputs(\"\");\n//   };\n\n//   const handleRemoveComment = (index) => {\n//     const updatedComments = [...comments];\n//     updatedComments.splice(index, 1);\n//     setComments(updatedComments);\n//     localStorage.setItem(\n//       `post_${id}_comments`,\n//       JSON.stringify(updatedComments)\n//     );\n//   };\n\n//   if (error) {\n//     return <p>Error: {error}</p>;\n//   }\n\n//   if (!post) {\n//     return <p>Loading...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"post-specific-content\">\n//         <div className=\"card\">\n//           <div className=\"card-body\">\n//             <h1>{post.title}</h1>\n//             <p className=\"centered\">{post.body}</p>\n//             <p>Posted by: {post.userName}</p>\n\n//             <form\n//               onSubmit={(e) => {\n//                 e.preventDefault();\n//                 handleCommentSubmit(commentInputs);\n//               }}\n//             >\n//               <textarea\n//                 value={commentInputs}\n//                 onChange={(e) => handleCommentInputChange(e.target.value)}\n//               />\n//               <button type=\"submit\">Submit</button>\n//             </form>\n//             <div>\n//               <ul>\n//                 {comments.map((comment, index) => (\n//                   <li key={index}>\n//                     {comment.body}\n//                     <button onClick={() => handleRemoveComment(index)}>\n//                       Delete\n//                     </button>\n//                   </li>\n//                 ))}\n//               </ul>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PostSpecific;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Navbar from \"../Components/Layouts/Navbar\";\nimport \"./Posts.css\";\n\nconst PostSpecific = () => {\n  const { id } = useParams();\n  const [post, setPost] = useState(null);\n  const [error, setError] = useState(null);\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    const fetchPost = async () => {\n      try {\n        const authToken = localStorage.getItem(\"accessToken\");\n        const response = await fetch(\n          `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n          {\n            headers: {\n              Authorization: `Bearer ${authToken}`,\n            },\n          }\n        );\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch post\");\n        }\n        const postData = await response.json();\n        console.log(\"Post object:\", postData);\n        setPost(postData);\n      } catch (error) {\n        console.error(\"Error fetching post:\", error);\n        setError(error.message);\n      }\n    };\n\n    fetchPost();\n\n    const storedComments = JSON.parse(\n      localStorage.getItem(`post_${id}_comments`)\n    );\n    if (storedComments) {\n      setComments(storedComments);\n    }\n  }, [id]);\n\n  const handleRemoveComment = (index) => {\n    const updatedComments = [...comments];\n    updatedComments.splice(index, 1);\n    setComments(updatedComments);\n    localStorage.setItem(\n      `post_${id}_comments`,\n      JSON.stringify(updatedComments)\n    );\n  };\n\n  if (error) {\n    return <p>Error: {error}</p>;\n  }\n\n  if (!post) {\n    return <p>Loading...</p>;\n  }\n\n  return (\n    <div>\n      <Navbar />\n      <div className=\"post-specific-content\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h1>Title: {post.title}</h1>\n            <p className=\"centered\">Body: {post.body}</p>\n            <div>\n              <ul>\n                {comments.map((comment, index) => (\n                  <li key={index}>\n                    {comment.body}\n                    <button onClick={() => handleRemoveComment(index)}>\n                      Delete\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PostSpecific;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAG,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}