{"ast":null,"code":"var _jsxFileName = \"/Users/ecf/holi-exam/src/Pages/PostSpecific.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n\n// const PostSpecific = () => {\n//   const { id } = useParams();\n//   const [post, setPost] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchPost = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch post\");\n//         }\n//         const postData = await response.json();\n//         setPost(postData);\n//       } catch (error) {\n//         console.error(\"Error fetching post:\", error);\n//         setError(error.message);\n//       }\n//     };\n\n//     fetchPost();\n//   }, [id]);\n\n//   if (error) {\n//     return <p>Error: {error}</p>;\n//   }\n\n//   if (!post) {\n//     return <p>Loading...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"post-specific-content\">\n//         <h1>{post.title}</h1>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PostSpecific;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n\n// const PostSpecific = () => {\n//   const { id } = useParams();\n//   const [post, setPost] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchPost = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           if (response.status === 404) {\n//             setError(\"Post not found\");\n//           } else {\n//             throw new Error(\"Failed to fetch post\");\n//           }\n//         } else {\n//           const postData = await response.json();\n//           setPost(postData);\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching post:\", error);\n//         setError(error.message);\n//       }\n//     };\n\n//     fetchPost();\n//   }, [id]);\n\n//   if (error) {\n//     return <p>Error: {error}</p>;\n//   }\n\n//   if (!post) {\n//     return <p>Loading...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"post-specific-content\">\n//         <h1>{post.title}</h1>\n//         <p>{post.body}</p>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PostSpecific;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams, Link } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n\n// const PostSpecific = () => {\n//   const { id } = useParams();\n//   const [post, setPost] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [commentInput, setCommentInput] = useState(\"\");\n\n//   useEffect(() => {\n//     const fetchPost = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           if (response.status === 404) {\n//             setError(\"Post not found\");\n//           } else {\n//             throw new Error(\"Failed to fetch post\");\n//           }\n//         } else {\n//           const postData = await response.json();\n//           setPost(postData);\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching post:\", error);\n//         setError(error.message);\n//       }\n//     };\n\n//     fetchPost();\n//   }, [id]);\n\n//   const handleCommentSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: commentInput }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n//       const updatedPostData = await response.json();\n//       setPost((prevPost) => ({\n//         ...prevPost,\n//         comments: [...(prevPost.comments || []), updatedPostData.comments],\n//       }));\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   const handleRemoveComment = async (index) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment/${index}`,\n//         {\n//           method: \"DELETE\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to remove comment\");\n//       }\n//       console.log(\"Comment removed successfully!\");\n//       const postData = await response.json();\n//       setPost(postData);\n//     } catch (error) {\n//       console.error(\"Error removing comment:\", error);\n//     }\n//   };\n\n//   const handleReactToPost = async () => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${id}/react`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to react to post\");\n//       }\n//       console.log(\"Reacted to post successfully!\");\n//       const postData = await response.json();\n//       setPost(postData);\n//     } catch (error) {\n//       console.error(\"Error reacting to post:\", error);\n//     }\n//   };\n\n//   const handleCommentInputChange = (e) => {\n//     setCommentInput(e.target.value);\n//   };\n\n//   if (error) {\n//     return <p>Error: {error}</p>;\n//   }\n\n//   if (!post) {\n//     return <p>Loading...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"post-specific-content\">\n//         <h1>{post.title}</h1>\n//         <p>{post.body}</p>\n//         <button\n//           onClick={handleReactToPost}\n//           className=\"btn btn-link float-end\"\n//           style={{ fontSize: \"1.2rem\" }}\n//         >\n//           {post.reacted ? (\n//             <i className=\"bi bi-heart-fill text-danger\"></i>\n//           ) : (\n//             <i className=\"bi bi-heart text-danger\"></i>\n//           )}\n//         </button>\n//         <form onSubmit={handleCommentSubmit}>\n//           <div className=\"form-group\">\n//             <textarea\n//               className=\"form-control\"\n//               rows=\"3\"\n//               value={commentInput}\n//               onChange={handleCommentInputChange}\n//               placeholder=\"Write a comment...\"\n//             />\n//           </div>\n//           <button type=\"submit\" className=\"btn btn-primary\">\n//             Submit\n//           </button>\n//         </form>\n//         {post.comments && (\n//           <ul className=\"list-group list-group-flush\">\n//             {post.comments.map((comment, index) => (\n//               <li key={index} className=\"list-group-item\">\n//                 {comment && comment.body && comment.body.trim()}\n//                 <button\n//                   className=\"btn btn-link float-end\"\n//                   onClick={() => handleRemoveComment(post.id, index)}\n//                 >\n//                   <i className=\"bi bi-x text-danger\"></i>\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PostSpecific;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n\n// const PostSpecific = () => {\n//   const { id } = useParams();\n//   const [post, setPost] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [commentInputs, setCommentInputs] = useState({});\n//   const [comments, setComments] = useState([]);\n\n//   useEffect(() => {\n//     const fetchPost = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch post\");\n//         }\n//         const postData = await response.json();\n//         setPost(postData);\n//       } catch (error) {\n//         console.error(\"Error fetching post:\", error);\n//         setError(error.message);\n//       }\n//     };\n\n//     fetchPost();\n\n//     const storedComments = JSON.parse(\n//       localStorage.getItem(`post_${id}_comments`)\n//     );\n//     if (storedComments) {\n//       setComments(storedComments);\n//     }\n//   }, [id]);\n\n//   const handleCommentSubmit = async (comment) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: comment }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n\n//       const newComments = [...comments, { body: comment }];\n//       setComments(newComments);\n\n//       localStorage.setItem(`post_${id}_comments`, JSON.stringify(newComments));\n\n//       clearCommentInput();\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   const handleCommentInputChange = (value) => {\n//     setCommentInputs(value);\n//   };\n\n//   const clearCommentInput = () => {\n//     setCommentInputs(\"\");\n//   };\n\n//   const handleRemoveComment = (index) => {\n//     const updatedComments = [...comments];\n//     updatedComments.splice(index, 1);\n//     setComments(updatedComments);\n//     localStorage.setItem(\n//       `post_${id}_comments`,\n//       JSON.stringify(updatedComments)\n//     );\n//   };\n\n//   if (error) {\n//     return <p>Error: {error}</p>;\n//   }\n\n//   if (!post) {\n//     return <p>Loading...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"post-specific-content\">\n//         <h1>{post.title}</h1>\n//         <div>\n//           <ul>\n//             {comments.map((comment, index) => (\n//               <li key={index}>\n//                 {comment.body}\n//                 <button onClick={() => handleRemoveComment(index)}>\n//                   Delete\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n//           <form\n//             onSubmit={(e) => {\n//               e.preventDefault();\n//               handleCommentSubmit(commentInputs);\n//             }}\n//           >\n//             <textarea\n//               value={commentInputs}\n//               onChange={(e) => handleCommentInputChange(e.target.value)}\n//             />\n//             <button type=\"submit\">Submit</button>\n//           </form>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PostSpecific;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import \"./Posts.css\";\n\n// const PostSpecific = () => {\n//   const { id } = useParams();\n//   const [post, setPost] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [commentInputs, setCommentInputs] = useState(\"\");\n//   const [comments, setComments] = useState([]);\n\n//   useEffect(() => {\n//     const fetchPost = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch post\");\n//         }\n//         const postData = await response.json();\n//         setPost(postData);\n//       } catch (error) {\n//         console.error(\"Error fetching post:\", error);\n//         setError(error.message);\n//       }\n//     };\n\n//     fetchPost();\n\n//     const storedComments = JSON.parse(\n//       localStorage.getItem(`post_${id}_comments`)\n//     );\n//     if (storedComments) {\n//       setComments(storedComments);\n//     }\n//   }, [id]);\n\n//   const handleCommentSubmit = async (comment) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: comment }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n\n//       const newComments = [...comments, { body: comment }];\n//       setComments(newComments);\n\n//       localStorage.setItem(`post_${id}_comments`, JSON.stringify(newComments));\n\n//       clearCommentInput();\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   const handleCommentInputChange = (value) => {\n//     setCommentInputs(value);\n//   };\n\n//   const clearCommentInput = () => {\n//     setCommentInputs(\"\");\n//   };\n\n//   const handleRemoveComment = (index) => {\n//     const updatedComments = [...comments];\n//     updatedComments.splice(index, 1);\n//     setComments(updatedComments);\n//     localStorage.setItem(\n//       `post_${id}_comments`,\n//       JSON.stringify(updatedComments)\n//     );\n//   };\n\n//   if (error) {\n//     return <p>Error: {error}</p>;\n//   }\n\n//   if (!post) {\n//     return <p>Loading...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"post-specific-content\">\n//         <div className=\"card\">\n//           <div className=\"card-body\">\n//             <h1>{post.title}</h1>\n//             <p className=\"centered\">{post.body}</p>\n//             <form\n//               onSubmit={(e) => {\n//                 e.preventDefault();\n//                 handleCommentSubmit(commentInputs);\n//               }}\n//             >\n//               <textarea\n//                 value={commentInputs}\n//                 onChange={(e) => handleCommentInputChange(e.target.value)}\n//               />\n//               <button type=\"submit\">Submit</button>\n//             </form>\n//             <div>\n//               <ul>\n//                 {comments.map((comment, index) => (\n//                   <li key={index}>\n//                     {comment.body}\n//                     <button onClick={() => handleRemoveComment(index)}>\n//                       Delete\n//                     </button>\n//                   </li>\n//                 ))}\n//               </ul>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PostSpecific;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Navbar from \"../Components/Layouts/Navbar\";\nimport \"./Posts.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostSpecific = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [post, setPost] = useState(null);\n  const [error, setError] = useState(null);\n  const [commentInputs, setCommentInputs] = useState(\"\");\n  const [comments, setComments] = useState([]);\n  useEffect(() => {\n    const fetchPost = async () => {\n      try {\n        const authToken = localStorage.getItem(\"accessToken\");\n        const response = await fetch(`https://nf-api.onrender.com/api/v1/social/posts/${post.userId}`, {\n          headers: {\n            Authorization: `Bearer ${authToken}`\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch post\");\n        }\n        const postData = await response.json();\n        console.log(\"Post object:\", postData);\n        setPost(postData);\n      } catch (error) {\n        console.error(\"Error fetching post:\", error);\n        setError(error.message);\n      }\n    };\n    fetchPost();\n    const storedComments = JSON.parse(localStorage.getItem(`post_${id}_comments`));\n    if (storedComments) {\n      setComments(storedComments);\n    }\n  }, [id]);\n  const handleCommentSubmit = async comment => {\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(`https://nf-api.onrender.com/api/v1/social/posts/${id}/comment`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          body: comment\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to submit comment\");\n      }\n      console.log(\"Comment submitted successfully!\");\n      const newComments = [...comments, {\n        body: comment\n      }];\n      setComments(newComments);\n      localStorage.setItem(`post_${id}_comments`, JSON.stringify(newComments));\n      clearCommentInput();\n    } catch (error) {\n      console.error(\"Error submitting comment:\", error);\n    }\n  };\n  const handleCommentInputChange = value => {\n    setCommentInputs(value);\n  };\n  const clearCommentInput = () => {\n    setCommentInputs(\"\");\n  };\n  const handleRemoveComment = index => {\n    const updatedComments = [...comments];\n    updatedComments.splice(index, 1);\n    setComments(updatedComments);\n    localStorage.setItem(`post_${id}_comments`, JSON.stringify(updatedComments));\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 672,\n      columnNumber: 12\n    }, this);\n  }\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 676,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 681,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-specific-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 685,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"centered\",\n            children: post.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Posted by: \", userName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: e => {\n              e.preventDefault();\n              handleCommentSubmit(commentInputs);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: commentInputs,\n              onChange: e => handleCommentInputChange(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 695,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 699,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [comment.body, /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleRemoveComment(index),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 706,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 704,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 682,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 680,\n    columnNumber: 5\n  }, this);\n};\n_s(PostSpecific, \"ytECNLT/ptYqYD3qmBXKKpAGxeg=\", false, function () {\n  return [useParams];\n});\n_c = PostSpecific;\nexport default PostSpecific;\nvar _c;\n$RefreshReg$(_c, \"PostSpecific\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Navbar","jsxDEV","_jsxDEV","PostSpecific","_s","id","post","setPost","error","setError","commentInputs","setCommentInputs","comments","setComments","fetchPost","authToken","localStorage","getItem","response","fetch","userId","headers","Authorization","ok","Error","postData","json","console","log","message","storedComments","JSON","parse","handleCommentSubmit","comment","method","body","stringify","newComments","setItem","clearCommentInput","handleCommentInputChange","value","handleRemoveComment","index","updatedComments","splice","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","userName","onSubmit","e","preventDefault","onChange","target","type","map","onClick","_c","$RefreshReg$"],"sources":["/Users/ecf/holi-exam/src/Pages/PostSpecific.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n\n// const PostSpecific = () => {\n//   const { id } = useParams();\n//   const [post, setPost] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchPost = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch post\");\n//         }\n//         const postData = await response.json();\n//         setPost(postData);\n//       } catch (error) {\n//         console.error(\"Error fetching post:\", error);\n//         setError(error.message);\n//       }\n//     };\n\n//     fetchPost();\n//   }, [id]);\n\n//   if (error) {\n//     return <p>Error: {error}</p>;\n//   }\n\n//   if (!post) {\n//     return <p>Loading...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"post-specific-content\">\n//         <h1>{post.title}</h1>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PostSpecific;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n\n// const PostSpecific = () => {\n//   const { id } = useParams();\n//   const [post, setPost] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const fetchPost = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           if (response.status === 404) {\n//             setError(\"Post not found\");\n//           } else {\n//             throw new Error(\"Failed to fetch post\");\n//           }\n//         } else {\n//           const postData = await response.json();\n//           setPost(postData);\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching post:\", error);\n//         setError(error.message);\n//       }\n//     };\n\n//     fetchPost();\n//   }, [id]);\n\n//   if (error) {\n//     return <p>Error: {error}</p>;\n//   }\n\n//   if (!post) {\n//     return <p>Loading...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"post-specific-content\">\n//         <h1>{post.title}</h1>\n//         <p>{post.body}</p>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PostSpecific;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams, Link } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n\n// const PostSpecific = () => {\n//   const { id } = useParams();\n//   const [post, setPost] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [commentInput, setCommentInput] = useState(\"\");\n\n//   useEffect(() => {\n//     const fetchPost = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           if (response.status === 404) {\n//             setError(\"Post not found\");\n//           } else {\n//             throw new Error(\"Failed to fetch post\");\n//           }\n//         } else {\n//           const postData = await response.json();\n//           setPost(postData);\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching post:\", error);\n//         setError(error.message);\n//       }\n//     };\n\n//     fetchPost();\n//   }, [id]);\n\n//   const handleCommentSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: commentInput }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n//       const updatedPostData = await response.json();\n//       setPost((prevPost) => ({\n//         ...prevPost,\n//         comments: [...(prevPost.comments || []), updatedPostData.comments],\n//       }));\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   const handleRemoveComment = async (index) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment/${index}`,\n//         {\n//           method: \"DELETE\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to remove comment\");\n//       }\n//       console.log(\"Comment removed successfully!\");\n//       const postData = await response.json();\n//       setPost(postData);\n//     } catch (error) {\n//       console.error(\"Error removing comment:\", error);\n//     }\n//   };\n\n//   const handleReactToPost = async () => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${id}/react`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to react to post\");\n//       }\n//       console.log(\"Reacted to post successfully!\");\n//       const postData = await response.json();\n//       setPost(postData);\n//     } catch (error) {\n//       console.error(\"Error reacting to post:\", error);\n//     }\n//   };\n\n//   const handleCommentInputChange = (e) => {\n//     setCommentInput(e.target.value);\n//   };\n\n//   if (error) {\n//     return <p>Error: {error}</p>;\n//   }\n\n//   if (!post) {\n//     return <p>Loading...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"post-specific-content\">\n//         <h1>{post.title}</h1>\n//         <p>{post.body}</p>\n//         <button\n//           onClick={handleReactToPost}\n//           className=\"btn btn-link float-end\"\n//           style={{ fontSize: \"1.2rem\" }}\n//         >\n//           {post.reacted ? (\n//             <i className=\"bi bi-heart-fill text-danger\"></i>\n//           ) : (\n//             <i className=\"bi bi-heart text-danger\"></i>\n//           )}\n//         </button>\n//         <form onSubmit={handleCommentSubmit}>\n//           <div className=\"form-group\">\n//             <textarea\n//               className=\"form-control\"\n//               rows=\"3\"\n//               value={commentInput}\n//               onChange={handleCommentInputChange}\n//               placeholder=\"Write a comment...\"\n//             />\n//           </div>\n//           <button type=\"submit\" className=\"btn btn-primary\">\n//             Submit\n//           </button>\n//         </form>\n//         {post.comments && (\n//           <ul className=\"list-group list-group-flush\">\n//             {post.comments.map((comment, index) => (\n//               <li key={index} className=\"list-group-item\">\n//                 {comment && comment.body && comment.body.trim()}\n//                 <button\n//                   className=\"btn btn-link float-end\"\n//                   onClick={() => handleRemoveComment(post.id, index)}\n//                 >\n//                   <i className=\"bi bi-x text-danger\"></i>\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PostSpecific;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n\n// const PostSpecific = () => {\n//   const { id } = useParams();\n//   const [post, setPost] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [commentInputs, setCommentInputs] = useState({});\n//   const [comments, setComments] = useState([]);\n\n//   useEffect(() => {\n//     const fetchPost = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch post\");\n//         }\n//         const postData = await response.json();\n//         setPost(postData);\n//       } catch (error) {\n//         console.error(\"Error fetching post:\", error);\n//         setError(error.message);\n//       }\n//     };\n\n//     fetchPost();\n\n//     const storedComments = JSON.parse(\n//       localStorage.getItem(`post_${id}_comments`)\n//     );\n//     if (storedComments) {\n//       setComments(storedComments);\n//     }\n//   }, [id]);\n\n//   const handleCommentSubmit = async (comment) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: comment }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n\n//       const newComments = [...comments, { body: comment }];\n//       setComments(newComments);\n\n//       localStorage.setItem(`post_${id}_comments`, JSON.stringify(newComments));\n\n//       clearCommentInput();\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   const handleCommentInputChange = (value) => {\n//     setCommentInputs(value);\n//   };\n\n//   const clearCommentInput = () => {\n//     setCommentInputs(\"\");\n//   };\n\n//   const handleRemoveComment = (index) => {\n//     const updatedComments = [...comments];\n//     updatedComments.splice(index, 1);\n//     setComments(updatedComments);\n//     localStorage.setItem(\n//       `post_${id}_comments`,\n//       JSON.stringify(updatedComments)\n//     );\n//   };\n\n//   if (error) {\n//     return <p>Error: {error}</p>;\n//   }\n\n//   if (!post) {\n//     return <p>Loading...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"post-specific-content\">\n//         <h1>{post.title}</h1>\n//         <div>\n//           <ul>\n//             {comments.map((comment, index) => (\n//               <li key={index}>\n//                 {comment.body}\n//                 <button onClick={() => handleRemoveComment(index)}>\n//                   Delete\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n//           <form\n//             onSubmit={(e) => {\n//               e.preventDefault();\n//               handleCommentSubmit(commentInputs);\n//             }}\n//           >\n//             <textarea\n//               value={commentInputs}\n//               onChange={(e) => handleCommentInputChange(e.target.value)}\n//             />\n//             <button type=\"submit\">Submit</button>\n//           </form>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PostSpecific;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import \"./Posts.css\";\n\n// const PostSpecific = () => {\n//   const { id } = useParams();\n//   const [post, setPost] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [commentInputs, setCommentInputs] = useState(\"\");\n//   const [comments, setComments] = useState([]);\n\n//   useEffect(() => {\n//     const fetchPost = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/posts/${id}`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch post\");\n//         }\n//         const postData = await response.json();\n//         setPost(postData);\n//       } catch (error) {\n//         console.error(\"Error fetching post:\", error);\n//         setError(error.message);\n//       }\n//     };\n\n//     fetchPost();\n\n//     const storedComments = JSON.parse(\n//       localStorage.getItem(`post_${id}_comments`)\n//     );\n//     if (storedComments) {\n//       setComments(storedComments);\n//     }\n//   }, [id]);\n\n//   const handleCommentSubmit = async (comment) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: comment }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n\n//       const newComments = [...comments, { body: comment }];\n//       setComments(newComments);\n\n//       localStorage.setItem(`post_${id}_comments`, JSON.stringify(newComments));\n\n//       clearCommentInput();\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   const handleCommentInputChange = (value) => {\n//     setCommentInputs(value);\n//   };\n\n//   const clearCommentInput = () => {\n//     setCommentInputs(\"\");\n//   };\n\n//   const handleRemoveComment = (index) => {\n//     const updatedComments = [...comments];\n//     updatedComments.splice(index, 1);\n//     setComments(updatedComments);\n//     localStorage.setItem(\n//       `post_${id}_comments`,\n//       JSON.stringify(updatedComments)\n//     );\n//   };\n\n//   if (error) {\n//     return <p>Error: {error}</p>;\n//   }\n\n//   if (!post) {\n//     return <p>Loading...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <div className=\"post-specific-content\">\n//         <div className=\"card\">\n//           <div className=\"card-body\">\n//             <h1>{post.title}</h1>\n//             <p className=\"centered\">{post.body}</p>\n//             <form\n//               onSubmit={(e) => {\n//                 e.preventDefault();\n//                 handleCommentSubmit(commentInputs);\n//               }}\n//             >\n//               <textarea\n//                 value={commentInputs}\n//                 onChange={(e) => handleCommentInputChange(e.target.value)}\n//               />\n//               <button type=\"submit\">Submit</button>\n//             </form>\n//             <div>\n//               <ul>\n//                 {comments.map((comment, index) => (\n//                   <li key={index}>\n//                     {comment.body}\n//                     <button onClick={() => handleRemoveComment(index)}>\n//                       Delete\n//                     </button>\n//                   </li>\n//                 ))}\n//               </ul>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PostSpecific;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Navbar from \"../Components/Layouts/Navbar\";\nimport \"./Posts.css\";\n\nconst PostSpecific = () => {\n  const { id } = useParams();\n  const [post, setPost] = useState(null);\n  const [error, setError] = useState(null);\n  const [commentInputs, setCommentInputs] = useState(\"\");\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    const fetchPost = async () => {\n      try {\n        const authToken = localStorage.getItem(\"accessToken\");\n        const response = await fetch(\n          `https://nf-api.onrender.com/api/v1/social/posts/${post.userId}`,\n          {\n            headers: {\n              Authorization: `Bearer ${authToken}`,\n            },\n          }\n        );\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch post\");\n        }\n        const postData = await response.json();\n        console.log(\"Post object:\", postData);\n        setPost(postData);\n      } catch (error) {\n        console.error(\"Error fetching post:\", error);\n        setError(error.message);\n      }\n    };\n\n    fetchPost();\n\n    const storedComments = JSON.parse(\n      localStorage.getItem(`post_${id}_comments`)\n    );\n    if (storedComments) {\n      setComments(storedComments);\n    }\n  }, [id]);\n\n  const handleCommentSubmit = async (comment) => {\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(\n        `https://nf-api.onrender.com/api/v1/social/posts/${id}/comment`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${authToken}`,\n          },\n          body: JSON.stringify({ body: comment }),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to submit comment\");\n      }\n      console.log(\"Comment submitted successfully!\");\n\n      const newComments = [...comments, { body: comment }];\n      setComments(newComments);\n\n      localStorage.setItem(`post_${id}_comments`, JSON.stringify(newComments));\n\n      clearCommentInput();\n    } catch (error) {\n      console.error(\"Error submitting comment:\", error);\n    }\n  };\n\n  const handleCommentInputChange = (value) => {\n    setCommentInputs(value);\n  };\n\n  const clearCommentInput = () => {\n    setCommentInputs(\"\");\n  };\n\n  const handleRemoveComment = (index) => {\n    const updatedComments = [...comments];\n    updatedComments.splice(index, 1);\n    setComments(updatedComments);\n    localStorage.setItem(\n      `post_${id}_comments`,\n      JSON.stringify(updatedComments)\n    );\n  };\n\n  if (error) {\n    return <p>Error: {error}</p>;\n  }\n\n  if (!post) {\n    return <p>Loading...</p>;\n  }\n\n  return (\n    <div>\n      <Navbar />\n      <div className=\"post-specific-content\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h1>{post.title}</h1>\n            <p className=\"centered\">{post.body}</p>\n            <p>Posted by: {userName}</p>\n\n            <form\n              onSubmit={(e) => {\n                e.preventDefault();\n                handleCommentSubmit(commentInputs);\n              }}\n            >\n              <textarea\n                value={commentInputs}\n                onChange={(e) => handleCommentInputChange(e.target.value)}\n              />\n              <button type=\"submit\">Submit</button>\n            </form>\n            <div>\n              <ul>\n                {comments.map((comment, index) => (\n                  <li key={index}>\n                    {comment.body}\n                    <button onClick={() => handleRemoveComment(index)}>\n                      Delete\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PostSpecific;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}