{"ast":null,"code":"var _jsxFileName = \"/Users/ecf/holi-exam/src/Pages/Posts.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import { Link } from \"react-router-dom\";\n// import CommentForm from \"./Post/CommentForm\";\n\n// const Posts = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const storedComments = JSON.parse(localStorage.getItem(\"comments\"));\n//     if (storedComments) {\n//       setPosts(storedComments);\n//     } else {\n//       fetchPosts();\n//     }\n//   }, []);\n\n//   const fetchPosts = async () => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         \"https://nf-api.onrender.com/api/v1/social/posts\",\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch posts\");\n//       }\n//       const postData = await response.json();\n//       setPosts(postData);\n//     } catch (error) {\n//       console.error(\"Error fetching posts:\", error);\n//       setError(error.message);\n//     }\n//   };\n\n//   const handleCommentSubmit = async (postId, comment) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: comment }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n\n//       const updatedPosts = posts.map((post) =>\n//         post.id === postId\n//           ? {\n//               ...post,\n//               comments: [...(post.comments || []), { body: comment }],\n//             }\n//           : post\n//       );\n//       setPosts(updatedPosts);\n\n//       localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <h2>List of Posts</h2>\n//       {error && <p>Error: {error}</p>}\n//       <ul>\n//         {posts.map((post) => (\n//           <li key={post.id}>\n//             <Link to={`/posts/${post.id}`} key={post.id}>\n//               {post.title}\n//             </Link>\n//             <CommentForm\n//               postId={post.id}\n//               onCommentSubmit={handleCommentSubmit}\n//             />\n//             {post.comments && (\n//               <ul>\n//                 {post.comments.map((comment, index) => (\n//                   <li key={index}>{comment.body}</li>\n//                 ))}\n//               </ul>\n//             )}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default Posts;\n\n// import React, { useState, useEffect } from \"react\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import { Link } from \"react-router-dom\";\n// import CommentForm from \"./Post/CommentForm\";\n\n// const Posts = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const storedPosts = JSON.parse(localStorage.getItem(\"comments\"));\n//     if (!storedPosts) {\n//       fetchPosts();\n//     } else {\n//       setPosts(storedPosts);\n//     }\n//   }, []);\n\n//   const fetchPosts = async () => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         \"https://nf-api.onrender.com/api/v1/social/posts\",\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch posts\");\n//       }\n//       const postData = await response.json();\n//       setPosts(postData);\n//     } catch (error) {\n//       console.error(\"Error fetching posts:\", error);\n//       setError(error.message);\n//     }\n//   };\n\n//   const handleCommentSubmit = async (postId, comment) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: comment }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n\n//       const updatedPosts = posts.map((post) =>\n//         post.id === postId\n//           ? {\n//               ...post,\n//               comments: [...(post.comments || []), { body: comment }],\n//             }\n//           : post\n//       );\n//       setPosts(updatedPosts);\n\n//       localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   const handleReactToPost = (postId) => {\n//     const updatedPosts = posts.map((post) =>\n//       post.id === postId\n//         ? {\n//             ...post,\n//             reacted: !post.reacted,\n//           }\n//         : post\n//     );\n//     setPosts(updatedPosts);\n//     localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <h2>List of Posts</h2>\n//       {error && <p>Error: {error}</p>}\n//       <ul>\n//         {posts.map((post) => (\n//           <li key={post.id}>\n//             <Link to={`/posts/${post.id}`} key={post.id}>\n//               {post.title}\n//             </Link>\n//             <CommentForm\n//               postId={post.id}\n//               onCommentSubmit={handleCommentSubmit}\n//             />\n//             <button\n//               onClick={() => handleReactToPost(post.id)}\n//               className=\"btn btn-link\"\n//             >\n//               {post.reacted ? (\n//                 <i className=\"bi bi-heart-fill\"></i>\n//               ) : (\n//                 <i className=\"bi bi-heart\"></i>\n//               )}\n//             </button>\n//             {post.comments && (\n//               <ul>\n//                 {post.comments.map((comment, index) => (\n//                   <li key={index}>{comment.body}</li>\n//                 ))}\n//               </ul>\n//             )}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default Posts;\n\nimport React, { useState, useEffect } from \"react\";\nimport Navbar from \"../Components/Layouts/Navbar\";\nimport { Link } from \"react-router-dom\";\nimport \"./Posts.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Posts = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(null);\n  const [commentInputs, setCommentInputs] = useState({});\n  useEffect(() => {\n    const storedPosts = JSON.parse(localStorage.getItem(\"comments\"));\n    if (!storedPosts) {\n      fetchPosts();\n    } else {\n      setPosts(storedPosts);\n    }\n  }, []);\n  const fetchPosts = async () => {\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(\"https://nf-api.onrender.com/api/v1/social/posts\", {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch posts\");\n      }\n      const postData = await response.json();\n      setPosts(postData);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      setError(error.message);\n    }\n  };\n  const handleCommentSubmit = async (postId, comment) => {\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(`https://nf-api.onrender.com/api/v1/social/posts/${postId}/comment`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          body: comment\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to submit comment\");\n      }\n      console.log(\"Comment submitted successfully!\");\n      const updatedPosts = posts.map(post => post.id === postId ? {\n        ...post,\n        comments: [...(post.comments || []), {\n          body: comment\n        }]\n      } : post);\n      setPosts(updatedPosts);\n      localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n      clearCommentInput(postId);\n    } catch (error) {\n      console.error(\"Error submitting comment:\", error);\n    }\n  };\n  const handleReactToPost = postId => {\n    const updatedPosts = posts.map(post => post.id === postId ? {\n      ...post,\n      reacted: !post.reacted\n    } : post);\n    setPosts(updatedPosts);\n    localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n  };\n  const handleCommentInputChange = (postId, value) => {\n    setCommentInputs(prevInputs => ({\n      ...prevInputs,\n      [postId]: value\n    }));\n  };\n  const clearCommentInput = postId => {\n    setCommentInputs(prevInputs => ({\n      ...prevInputs,\n      [postId]: \"\"\n    }));\n  };\n  const handleRemoveComment = (postId, index) => {\n    const updatedPosts = posts.map(post => {\n      if (post.id === postId) {\n        const updatedComments = [...post.comments];\n        updatedComments.splice(index, 1);\n        return {\n          ...post,\n          comments: updatedComments\n        };\n      }\n      return post;\n    });\n    setPosts(updatedPosts);\n    localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posts-container\",\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"card-title\",\n              children: [/*#__PURE__*/_jsxDEV(Link, {\n                to: `/posts/${post.id}`,\n                children: post.title\n              }, post.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleReactToPost(post.id),\n                className: \"btn btn-link float-end\",\n                style: {\n                  fontSize: \"1.2rem\"\n                },\n                children: post.reacted ? /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"bi bi-heart-fill text-danger\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"bi bi-heart text-danger\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 378,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: e => {\n                e.preventDefault();\n                handleCommentSubmit(post.id, commentInputs[post.id]);\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                  className: \"form-control\",\n                  rows: \"3\",\n                  value: commentInputs[post.id] || \"\",\n                  onChange: e => handleCommentInputChange(post.id, e.target.value),\n                  placeholder: \"Write a comment...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 389,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"btn btn-primary\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 17\n            }, this), post.comments && /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"list-group list-group-flush\",\n              children: post.comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"list-group-item\",\n                children: [comment.body, /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-link float-end\",\n                  onClick: () => handleRemoveComment(post.id, index),\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"bi bi-x text-danger\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 412,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 408,\n                  columnNumber: 25\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this)\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 357,\n    columnNumber: 5\n  }, this);\n};\n_s(Posts, \"KO5IBiNIx6OHP9XUaykC7DboBiY=\");\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","Link","jsxDEV","_jsxDEV","Posts","_s","posts","setPosts","error","setError","commentInputs","setCommentInputs","storedPosts","JSON","parse","localStorage","getItem","fetchPosts","authToken","response","fetch","headers","Authorization","ok","Error","postData","json","console","message","handleCommentSubmit","postId","comment","method","body","stringify","log","updatedPosts","map","post","id","comments","setItem","clearCommentInput","handleReactToPost","reacted","handleCommentInputChange","value","prevInputs","handleRemoveComment","index","updatedComments","splice","children","fileName","_jsxFileName","lineNumber","columnNumber","className","to","title","onClick","style","fontSize","onSubmit","e","preventDefault","rows","onChange","target","placeholder","type","_c","$RefreshReg$"],"sources":["/Users/ecf/holi-exam/src/Pages/Posts.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import { Link } from \"react-router-dom\";\n// import CommentForm from \"./Post/CommentForm\";\n\n// const Posts = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const storedComments = JSON.parse(localStorage.getItem(\"comments\"));\n//     if (storedComments) {\n//       setPosts(storedComments);\n//     } else {\n//       fetchPosts();\n//     }\n//   }, []);\n\n//   const fetchPosts = async () => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         \"https://nf-api.onrender.com/api/v1/social/posts\",\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch posts\");\n//       }\n//       const postData = await response.json();\n//       setPosts(postData);\n//     } catch (error) {\n//       console.error(\"Error fetching posts:\", error);\n//       setError(error.message);\n//     }\n//   };\n\n//   const handleCommentSubmit = async (postId, comment) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: comment }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n\n//       const updatedPosts = posts.map((post) =>\n//         post.id === postId\n//           ? {\n//               ...post,\n//               comments: [...(post.comments || []), { body: comment }],\n//             }\n//           : post\n//       );\n//       setPosts(updatedPosts);\n\n//       localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <h2>List of Posts</h2>\n//       {error && <p>Error: {error}</p>}\n//       <ul>\n//         {posts.map((post) => (\n//           <li key={post.id}>\n//             <Link to={`/posts/${post.id}`} key={post.id}>\n//               {post.title}\n//             </Link>\n//             <CommentForm\n//               postId={post.id}\n//               onCommentSubmit={handleCommentSubmit}\n//             />\n//             {post.comments && (\n//               <ul>\n//                 {post.comments.map((comment, index) => (\n//                   <li key={index}>{comment.body}</li>\n//                 ))}\n//               </ul>\n//             )}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default Posts;\n\n// import React, { useState, useEffect } from \"react\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import { Link } from \"react-router-dom\";\n// import CommentForm from \"./Post/CommentForm\";\n\n// const Posts = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const storedPosts = JSON.parse(localStorage.getItem(\"comments\"));\n//     if (!storedPosts) {\n//       fetchPosts();\n//     } else {\n//       setPosts(storedPosts);\n//     }\n//   }, []);\n\n//   const fetchPosts = async () => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         \"https://nf-api.onrender.com/api/v1/social/posts\",\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch posts\");\n//       }\n//       const postData = await response.json();\n//       setPosts(postData);\n//     } catch (error) {\n//       console.error(\"Error fetching posts:\", error);\n//       setError(error.message);\n//     }\n//   };\n\n//   const handleCommentSubmit = async (postId, comment) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: comment }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n\n//       const updatedPosts = posts.map((post) =>\n//         post.id === postId\n//           ? {\n//               ...post,\n//               comments: [...(post.comments || []), { body: comment }],\n//             }\n//           : post\n//       );\n//       setPosts(updatedPosts);\n\n//       localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   const handleReactToPost = (postId) => {\n//     const updatedPosts = posts.map((post) =>\n//       post.id === postId\n//         ? {\n//             ...post,\n//             reacted: !post.reacted,\n//           }\n//         : post\n//     );\n//     setPosts(updatedPosts);\n//     localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       <h2>List of Posts</h2>\n//       {error && <p>Error: {error}</p>}\n//       <ul>\n//         {posts.map((post) => (\n//           <li key={post.id}>\n//             <Link to={`/posts/${post.id}`} key={post.id}>\n//               {post.title}\n//             </Link>\n//             <CommentForm\n//               postId={post.id}\n//               onCommentSubmit={handleCommentSubmit}\n//             />\n//             <button\n//               onClick={() => handleReactToPost(post.id)}\n//               className=\"btn btn-link\"\n//             >\n//               {post.reacted ? (\n//                 <i className=\"bi bi-heart-fill\"></i>\n//               ) : (\n//                 <i className=\"bi bi-heart\"></i>\n//               )}\n//             </button>\n//             {post.comments && (\n//               <ul>\n//                 {post.comments.map((comment, index) => (\n//                   <li key={index}>{comment.body}</li>\n//                 ))}\n//               </ul>\n//             )}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default Posts;\n\nimport React, { useState, useEffect } from \"react\";\nimport Navbar from \"../Components/Layouts/Navbar\";\nimport { Link } from \"react-router-dom\";\nimport \"./Posts.css\";\n\nconst Posts = () => {\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(null);\n  const [commentInputs, setCommentInputs] = useState({});\n\n  useEffect(() => {\n    const storedPosts = JSON.parse(localStorage.getItem(\"comments\"));\n    if (!storedPosts) {\n      fetchPosts();\n    } else {\n      setPosts(storedPosts);\n    }\n  }, []);\n\n  const fetchPosts = async () => {\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(\n        \"https://nf-api.onrender.com/api/v1/social/posts\",\n        {\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n          },\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch posts\");\n      }\n      const postData = await response.json();\n      setPosts(postData);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      setError(error.message);\n    }\n  };\n\n  const handleCommentSubmit = async (postId, comment) => {\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(\n        `https://nf-api.onrender.com/api/v1/social/posts/${postId}/comment`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${authToken}`,\n          },\n          body: JSON.stringify({ body: comment }),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to submit comment\");\n      }\n      console.log(\"Comment submitted successfully!\");\n\n      const updatedPosts = posts.map((post) =>\n        post.id === postId\n          ? {\n              ...post,\n              comments: [...(post.comments || []), { body: comment }],\n            }\n          : post\n      );\n      setPosts(updatedPosts);\n\n      localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n      clearCommentInput(postId);\n    } catch (error) {\n      console.error(\"Error submitting comment:\", error);\n    }\n  };\n\n  const handleReactToPost = (postId) => {\n    const updatedPosts = posts.map((post) =>\n      post.id === postId\n        ? {\n            ...post,\n            reacted: !post.reacted,\n          }\n        : post\n    );\n    setPosts(updatedPosts);\n    localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n  };\n\n  const handleCommentInputChange = (postId, value) => {\n    setCommentInputs((prevInputs) => ({\n      ...prevInputs,\n      [postId]: value,\n    }));\n  };\n\n  const clearCommentInput = (postId) => {\n    setCommentInputs((prevInputs) => ({\n      ...prevInputs,\n      [postId]: \"\",\n    }));\n  };\n\n  const handleRemoveComment = (postId, index) => {\n    const updatedPosts = posts.map((post) => {\n      if (post.id === postId) {\n        const updatedComments = [...post.comments];\n        updatedComments.splice(index, 1);\n        return {\n          ...post,\n          comments: updatedComments,\n        };\n      }\n      return post;\n    });\n    setPosts(updatedPosts);\n    localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n  };\n\n  return (\n    <div>\n      <Navbar />\n      <h1>Posts</h1>\n      {error && <p>Error: {error}</p>}\n      <div className=\"posts-container\">\n        {posts.map((post) => (\n          <div className=\"post-card\" key={post.id}>\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">\n                  <Link to={`/posts/${post.id}`} key={post.id}>\n                    {post.title}\n                  </Link>\n                  <button\n                    onClick={() => handleReactToPost(post.id)}\n                    className=\"btn btn-link float-end\"\n                    style={{ fontSize: \"1.2rem\" }}\n                  >\n                    {post.reacted ? (\n                      <i className=\"bi bi-heart-fill text-danger\"></i>\n                    ) : (\n                      <i className=\"bi bi-heart text-danger\"></i>\n                    )}\n                  </button>\n                </h5>\n                <form\n                  onSubmit={(e) => {\n                    e.preventDefault();\n                    handleCommentSubmit(post.id, commentInputs[post.id]);\n                  }}\n                >\n                  <div className=\"form-group\">\n                    <textarea\n                      className=\"form-control\"\n                      rows=\"3\"\n                      value={commentInputs[post.id] || \"\"}\n                      onChange={(e) =>\n                        handleCommentInputChange(post.id, e.target.value)\n                      }\n                      placeholder=\"Write a comment...\"\n                    />\n                  </div>\n                  <button type=\"submit\" className=\"btn btn-primary\">\n                    Submit\n                  </button>\n                </form>\n                {post.comments && (\n                  <ul className=\"list-group list-group-flush\">\n                    {post.comments.map((comment, index) => (\n                      <li key={index} className=\"list-group-item\">\n                        {comment.body}\n                        <button\n                          className=\"btn btn-link float-end\"\n                          onClick={() => handleRemoveComment(post.id, index)}\n                        >\n                          <i className=\"bi bi-x text-danger\"></i>\n                        </button>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Posts;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}