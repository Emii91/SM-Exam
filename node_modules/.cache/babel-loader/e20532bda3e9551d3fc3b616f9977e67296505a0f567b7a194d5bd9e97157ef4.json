{"ast":null,"code":"var _jsxFileName = \"/Users/ecf/holi-exam/src/Pages/Post/EditPost.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n\n// const EditPost = ({ postId }) => {\n//   const [title, setTitle] = useState(\"\");\n//   const [body, setBody] = useState(\"\");\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n//         {\n//           method: \"PUT\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ title, body }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to update post\");\n//       }\n//       console.log(\"Post updated successfully!\");\n//     } catch (error) {\n//       console.error(\"Error updating post:\", error);\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div>\n//         <label htmlFor=\"title\">Title:</label>\n//         <input\n//           type=\"text\"\n//           id=\"title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label htmlFor=\"body\">Body:</label>\n//         <textarea\n//           id=\"body\"\n//           value={body}\n//           onChange={(e) => setBody(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\">Update Post</button>\n//     </form>\n//   );\n// };\n\n// export default EditPost;\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditPost = ({\n  postId\n}) => {\n  _s();\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(`https://nf-api.onrender.com/api/v1/social/posts/${postId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          title,\n          body\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update post\");\n      }\n      console.log(\"Post updated successfully!\");\n      setSuccessMessageVisible(true);\n      setTitle(\"\");\n      setBody(\"\");\n    } catch (error) {\n      console.error(\"Error updating post:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [successMessageVisible && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Post updated successfully!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 33\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          children: \"Title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"title\",\n          value: title,\n          onChange: e => setTitle(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"body\",\n          children: \"Body:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"body\",\n          value: body,\n          onChange: e => setBody(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(EditPost, \"M3++fkDdt/QbZXTm3i3ZAORrNjM=\");\n_c = EditPost;\nexport default EditPost;\nvar _c;\n$RefreshReg$(_c, \"EditPost\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","EditPost","postId","_s","title","setTitle","body","setBody","successMessageVisible","setSuccessMessageVisible","handleSubmit","e","preventDefault","authToken","localStorage","getItem","response","fetch","method","headers","Authorization","JSON","stringify","ok","Error","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/Users/ecf/holi-exam/src/Pages/Post/EditPost.js"],"sourcesContent":["// import React, { useState } from \"react\";\n\n// const EditPost = ({ postId }) => {\n//   const [title, setTitle] = useState(\"\");\n//   const [body, setBody] = useState(\"\");\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n//         {\n//           method: \"PUT\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ title, body }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to update post\");\n//       }\n//       console.log(\"Post updated successfully!\");\n//     } catch (error) {\n//       console.error(\"Error updating post:\", error);\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div>\n//         <label htmlFor=\"title\">Title:</label>\n//         <input\n//           type=\"text\"\n//           id=\"title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label htmlFor=\"body\">Body:</label>\n//         <textarea\n//           id=\"body\"\n//           value={body}\n//           onChange={(e) => setBody(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\">Update Post</button>\n//     </form>\n//   );\n// };\n\n// export default EditPost;\n\nimport React, { useState } from \"react\";\n\nconst EditPost = ({ postId }) => {\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(\n        `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${authToken}`,\n          },\n          body: JSON.stringify({ title, body }),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to update post\");\n      }\n      console.log(\"Post updated successfully!\");\n      setSuccessMessageVisible(true);\n      setTitle(\"\");\n      setBody(\"\");\n    } catch (error) {\n      console.error(\"Error updating post:\", error);\n    }\n  };\n\n  return (\n    <div>\n      {successMessageVisible && <p>Post updated successfully!</p>}\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"title\">Title:</label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            required\n          />\n        </div>\n        <div>\n          <label htmlFor=\"body\">Body:</label>\n          <textarea\n            id=\"body\"\n            value={body}\n            onChange={(e) => setBody(e.target.value)}\n            required\n          />\n        </div>\n        <button type=\"submit\">Update Post</button>\n      </form>\n    </div>\n  );\n};\n\nexport default EditPost;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEzE,MAAMY,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;MACrD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,mDAAkDf,MAAO,EAAC,EAC3D;QACEgB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAG,UAASP,SAAU;QACrC,CAAC;QACDP,IAAI,EAAEe,IAAI,CAACC,SAAS,CAAC;UAAElB,KAAK;UAAEE;QAAK,CAAC;MACtC,CACF,CAAC;MACD,IAAI,CAACU,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACAC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzCjB,wBAAwB,CAAC,IAAI,CAAC;MAC9BJ,QAAQ,CAAC,EAAE,CAAC;MACZE,OAAO,CAAC,EAAE,CAAC;IACb,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,oBACE3B,OAAA;IAAA4B,QAAA,GACGpB,qBAAqB,iBAAIR,OAAA;MAAA4B,QAAA,EAAG;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC3DhC,OAAA;MAAMiC,QAAQ,EAAEvB,YAAa;MAAAkB,QAAA,gBAC3B5B,OAAA;QAAA4B,QAAA,gBACE5B,OAAA;UAAOkC,OAAO,EAAC,OAAO;UAAAN,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACrChC,OAAA;UACEmC,IAAI,EAAC,MAAM;UACXC,EAAE,EAAC,OAAO;UACVC,KAAK,EAAEjC,KAAM;UACbkC,QAAQ,EAAG3B,CAAC,IAAKN,QAAQ,CAACM,CAAC,CAAC4B,MAAM,CAACF,KAAK,CAAE;UAC1CG,QAAQ;QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNhC,OAAA;QAAA4B,QAAA,gBACE5B,OAAA;UAAOkC,OAAO,EAAC,MAAM;UAAAN,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACnChC,OAAA;UACEoC,EAAE,EAAC,MAAM;UACTC,KAAK,EAAE/B,IAAK;UACZgC,QAAQ,EAAG3B,CAAC,IAAKJ,OAAO,CAACI,CAAC,CAAC4B,MAAM,CAACF,KAAK,CAAE;UACzCG,QAAQ;QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNhC,OAAA;QAAQmC,IAAI,EAAC,QAAQ;QAAAP,QAAA,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAC7B,EAAA,CA3DIF,QAAQ;AAAAwC,EAAA,GAARxC,QAAQ;AA6Dd,eAAeA,QAAQ;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}