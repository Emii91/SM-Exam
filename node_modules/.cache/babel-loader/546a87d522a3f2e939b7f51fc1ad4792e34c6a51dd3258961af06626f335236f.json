{"ast":null,"code":"// // import React, { useState, useEffect } from \"react\";\n// // import { Link } from \"react-router-dom\";\n// // import Navbar from \"../Components/Layouts/Navbar\";\n// // import CreatePostForm from \"./Post/CreatePostForm\";\n// // import DeletePost from \"./Post/DeletePost\";\n// // import EditPost from \"./Post/EditPost\";\n// // import \"./MyProfile.css\";\n\n// // const MyProfile = () => {\n// //   const [avatarURL, setAvatarURL] = useState(\"\");\n// //   const [bannerURL, setBannerURL] = useState(\"\");\n// //   const [error, setError] = useState(null);\n// //   const [showCreatePostForm, setShowCreatePostForm] = useState(false);\n// //   const [posts, setPosts] = useState([]);\n// //   const [successMessage, setSuccessMessage] = useState(\"\");\n// //   const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n\n// //   const profileName = localStorage.getItem(\"userName\");\n\n// //   useEffect(() => {\n// //     const storedAvatarURL = localStorage.getItem(\"avatarURL\");\n// //     if (storedAvatarURL) {\n// //       setAvatarURL(storedAvatarURL);\n// //     }\n\n// //     const storedBannerURL = localStorage.getItem(\"bannerURL\");\n// //     if (storedBannerURL) {\n// //       setBannerURL(storedBannerURL);\n// //     }\n\n// //     const fetchUserPosts = async () => {\n// //       try {\n// //         const authToken = localStorage.getItem(\"accessToken\");\n// //         const response = await fetch(\n// //           `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/posts`,\n// //           {\n// //             headers: {\n// //               Authorization: `Bearer ${authToken}`,\n// //             },\n// //           }\n// //         );\n// //         if (!response.ok) {\n// //           throw new Error(\"Failed to fetch user's posts\");\n// //         }\n// //         const postData = await response.json();\n// //         setPosts(postData);\n// //       } catch (error) {\n// //         console.error(\"Error fetching user's posts:\", error);\n// //         setError(\"Failed to fetch user's posts\");\n// //       }\n// //     };\n\n// //     fetchUserPosts();\n// //   }, []);\n\n// //   const handleAvatarURLChange = (event) => {\n// //     setAvatarURL(event.target.value);\n// //   };\n\n// //   const handleBannerURLChange = (event) => {\n// //     setBannerURL(event.target.value);\n// //   };\n\n// //   const handleSubmit = async (event) => {\n// //     event.preventDefault();\n\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/media`,\n// //         {\n// //           method: \"PUT\",\n// //           headers: {\n// //             Authorization: `Bearer ${authToken}`,\n// //             \"Content-Type\": \"application/json\",\n// //           },\n// //           body: JSON.stringify({\n// //             avatar: avatarURL,\n// //             banner: bannerURL,\n// //           }),\n// //         }\n// //       );\n\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to update profile media\");\n// //       }\n\n// //       localStorage.setItem(\"avatarURL\", avatarURL);\n// //       localStorage.setItem(\"bannerURL\", bannerURL);\n\n// //       console.log(\"Avatar and Banner URLs updated successfully!\");\n// //     } catch (error) {\n// //       console.error(\"Error updating profile media:\", error);\n// //       setError(\"Failed to update profile media\");\n// //     }\n// //   };\n\n// //   const handleCreatePostClick = () => {\n// //     setShowCreatePostForm(true);\n// //   };\n\n// //   const handlePostDeleted = async (postId) => {\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n// //         {\n// //           method: \"DELETE\",\n// //           headers: {\n// //             Authorization: `Bearer ${authToken}`,\n// //           },\n// //         }\n// //       );\n\n// //       if (response.ok || response.status === 204) {\n// //         setPosts(posts.filter((post) => post.id !== postId));\n// //         setSuccessMessage(\"Post deleted successfully!\");\n// //         setSuccessMessageVisible(true);\n// //       } else {\n// //         throw new Error(\"Failed to delete post\");\n// //       }\n// //     } catch (error) {\n// //       console.error(\"Error deleting post:\", error);\n// //       setError(\"Failed to delete post\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <Navbar />\n// //       {bannerURL && (\n// //         <div className=\"banner-container\">\n// //           <img src={bannerURL} alt=\"Banner\" className=\"banner-image\" />\n// //         </div>\n// //       )}\n// //       {avatarURL && (\n// //         <div className=\"card\" style={{ width: \"18rem\" }}>\n// //           <img src={avatarURL} className=\"card-img-top\" alt=\"Avatar\" />\n// //           <div className=\"card-body\">\n// //             <p className=\"card-text\">Update your avatar or banner image.</p>\n// //           </div>\n// //         </div>\n// //       )}\n// //       <form onSubmit={handleSubmit}>\n// //         <div>\n// //           <label htmlFor=\"avatarURL\">Avatar URL:</label>\n// //           <input\n// //             type=\"text\"\n// //             id=\"avatarURL\"\n// //             value={avatarURL}\n// //             onChange={handleAvatarURLChange}\n// //           />\n// //         </div>\n// //         <div>\n// //           <label htmlFor=\"bannerURL\">Banner URL:</label>\n// //           <input\n// //             type=\"text\"\n// //             id=\"bannerURL\"\n// //             value={bannerURL}\n// //             onChange={handleBannerURLChange}\n// //           />\n// //         </div>\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n// //       <button onClick={handleCreatePostClick}>Create Post</button>\n// //       {showCreatePostForm && <CreatePostForm />}\n// //       <Link to=\"/posts\">View Posts</Link>\n// //       {error && <p>Error: {error}</p>}\n// //       <h2>Your Posts:</h2>\n// //       {posts.map((post) => (\n// //         <div key={post.id}>\n// //           <h3>{post.title}</h3>\n// //           <p>{post.body}</p>\n// //           <EditPost postId={post.id} />\n// //           <DeletePost postId={post.id} onPostDeleted={handlePostDeleted} />\n// //         </div>\n// //       ))}\n// //       {successMessageVisible && <p>{successMessage}</p>}\n// //     </div>\n// //   );\n// // };\n\n// // export default MyProfile;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import CreatePostForm from \"./Post/CreatePostForm\";\n// import DeletePost from \"./Post/DeletePost\";\n// import EditPost from \"./Post/EditPost\";\n// import \"./MyProfile.css\";\n\n// const MyProfile = () => {\n//   const [avatarURL, setAvatarURL] = useState(\"\");\n//   const [bannerURL, setBannerURL] = useState(\"\");\n//   const [error, setError] = useState(null);\n//   const [showCreatePostForm, setShowCreatePostForm] = useState(false);\n//   const [posts, setPosts] = useState([]);\n//   const [successMessage, setSuccessMessage] = useState(\"\");\n//   const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n\n//   const profileName = localStorage.getItem(\"userName\");\n\n//   useEffect(() => {\n//     const storedAvatarURL = localStorage.getItem(\"avatarURL\");\n//     if (storedAvatarURL) {\n//       setAvatarURL(storedAvatarURL);\n//     }\n\n//     const storedBannerURL = localStorage.getItem(\"bannerURL\");\n//     if (storedBannerURL) {\n//       setBannerURL(storedBannerURL);\n//     }\n\n//     const fetchUserPosts = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/posts`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch user's posts\");\n//         }\n//         const postData = await response.json();\n//         setPosts(postData);\n//       } catch (error) {\n//         console.error(\"Error fetching user's posts:\", error);\n//         setError(\"Failed to fetch user's posts\");\n//       }\n//     };\n\n//     fetchUserPosts();\n//   }, []);\n\n//   const handleAvatarURLChange = (event) => {\n//     setAvatarURL(event.target.value);\n//   };\n\n//   const handleBannerURLChange = (event) => {\n//     setBannerURL(event.target.value);\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/media`,\n//         {\n//           method: \"PUT\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             avatar: avatarURL,\n//             banner: bannerURL,\n//           }),\n//         }\n//       );\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to update profile media\");\n//       }\n\n//       localStorage.setItem(\"avatarURL\", avatarURL);\n//       localStorage.setItem(\"bannerURL\", bannerURL);\n\n//       console.log(\"Avatar and Banner URLs updated successfully!\");\n//     } catch (error) {\n//       console.error(\"Error updating profile media:\", error);\n//       setError(\"Failed to update profile media\");\n//     }\n//   };\n\n//   const handleCreatePostClick = () => {\n//     setShowCreatePostForm(true);\n//   };\n\n//   const handlePostDeleted = async (postId) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n//         {\n//           method: \"DELETE\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n\n//       if (response.ok || response.status === 204) {\n//         setPosts(posts.filter((post) => post.id !== postId));\n//         setSuccessMessage(\"Post deleted successfully!\");\n//         setSuccessMessageVisible(true);\n//       } else {\n//         throw new Error(\"Failed to delete post\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       setError(\"Failed to delete post\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       {/* Banner */}\n//       {bannerURL && (\n//         <div className=\"banner-container\">\n//           <img src={bannerURL} alt=\"Banner\" className=\"banner-image\" />\n//         </div>\n//       )}\n\n//       {/* Profile card */}\n//       <div className=\"card mb-3\" style={{ width: \"24rem\" }}>\n//         <img src={avatarURL} className=\"card-img-top\" alt=\"Avatar\" />\n//         <div className=\"card-body\">\n//           <h5 className=\"card-title\">Profile Images</h5>\n//           <p className=\"card-text\">Update your avatar and banner images.</p>\n//           {/* Form for updating avatar */}\n//           <form onSubmit={handleSubmit}>\n//             <div className=\"form-group\">\n//               <label htmlFor=\"avatarURL\">New Avatar URL:</label>\n//               <input\n//                 type=\"text\"\n//                 id=\"avatarURL\"\n//                 value={avatarURL}\n//                 onChange={handleAvatarURLChange}\n//                 className=\"form-control mb-2\"\n//               />\n//               <button type=\"submit\" className=\"btn btn-primary btn-block\">\n//                 Update Avatar\n//               </button>\n//             </div>\n//           </form>\n\n//           {/* Form for updating banner */}\n//           <form onSubmit={handleSubmit}>\n//             <div className=\"form-group\">\n//               <label htmlFor=\"bannerURL\">New Banner URL:</label>\n//               <input\n//                 type=\"text\"\n//                 id=\"bannerURL\"\n//                 value={bannerURL}\n//                 onChange={handleBannerURLChange}\n//                 className=\"form-control mb-2\"\n//               />\n//               <button type=\"submit\" className=\"btn btn-primary btn-block\">\n//                 Update Banner\n//               </button>\n//             </div>\n//           </form>\n//         </div>\n//       </div>\n\n//       {/* Create Post Section */}\n//       <div className=\"card mb-3\" style={{ width: \"24rem\" }}>\n//         <div className=\"card-body\">\n//           <h5 className=\"card-title\">Create Post</h5>\n//           <button\n//             type=\"button\"\n//             className=\"btn btn-primary btn-block\"\n//             onClick={handleCreatePostClick}\n//           >\n//             Create Post\n//           </button>\n//           {showCreatePostForm && <CreatePostForm />}\n//         </div>\n//       </div>\n\n//       {/* Display user's posts */}\n//       {posts.map((post) => (\n//         <div className=\"card mb-3\" key={post.id}>\n//           <div className=\"card-body\">\n//             <h5 className=\"card-title\">{post.title}</h5>\n//             <p className=\"card-text\">{post.body}</p>\n//             <div className=\"btn-group\" role=\"group\">\n//               <EditPost postId={post.id} />\n//               <DeletePost postId={post.id} onPostDeleted={handlePostDeleted} />\n//             </div>\n//           </div>\n//         </div>\n//       ))}\n\n//       {/* View Posts link */}\n//       <Link to=\"/posts\">View Posts</Link>\n\n//       {/* Error and success messages */}\n//       {error && <p>Error: {error}</p>}\n//       {successMessageVisible && <p>{successMessage}</p>}\n//     </div>\n//   );\n// };\n\n// export default MyProfile;","map":{"version":3,"names":[],"sources":["/Users/ecf/holi-exam/src/Pages/MyProfile.js"],"sourcesContent":["// // import React, { useState, useEffect } from \"react\";\n// // import { Link } from \"react-router-dom\";\n// // import Navbar from \"../Components/Layouts/Navbar\";\n// // import CreatePostForm from \"./Post/CreatePostForm\";\n// // import DeletePost from \"./Post/DeletePost\";\n// // import EditPost from \"./Post/EditPost\";\n// // import \"./MyProfile.css\";\n\n// // const MyProfile = () => {\n// //   const [avatarURL, setAvatarURL] = useState(\"\");\n// //   const [bannerURL, setBannerURL] = useState(\"\");\n// //   const [error, setError] = useState(null);\n// //   const [showCreatePostForm, setShowCreatePostForm] = useState(false);\n// //   const [posts, setPosts] = useState([]);\n// //   const [successMessage, setSuccessMessage] = useState(\"\");\n// //   const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n\n// //   const profileName = localStorage.getItem(\"userName\");\n\n// //   useEffect(() => {\n// //     const storedAvatarURL = localStorage.getItem(\"avatarURL\");\n// //     if (storedAvatarURL) {\n// //       setAvatarURL(storedAvatarURL);\n// //     }\n\n// //     const storedBannerURL = localStorage.getItem(\"bannerURL\");\n// //     if (storedBannerURL) {\n// //       setBannerURL(storedBannerURL);\n// //     }\n\n// //     const fetchUserPosts = async () => {\n// //       try {\n// //         const authToken = localStorage.getItem(\"accessToken\");\n// //         const response = await fetch(\n// //           `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/posts`,\n// //           {\n// //             headers: {\n// //               Authorization: `Bearer ${authToken}`,\n// //             },\n// //           }\n// //         );\n// //         if (!response.ok) {\n// //           throw new Error(\"Failed to fetch user's posts\");\n// //         }\n// //         const postData = await response.json();\n// //         setPosts(postData);\n// //       } catch (error) {\n// //         console.error(\"Error fetching user's posts:\", error);\n// //         setError(\"Failed to fetch user's posts\");\n// //       }\n// //     };\n\n// //     fetchUserPosts();\n// //   }, []);\n\n// //   const handleAvatarURLChange = (event) => {\n// //     setAvatarURL(event.target.value);\n// //   };\n\n// //   const handleBannerURLChange = (event) => {\n// //     setBannerURL(event.target.value);\n// //   };\n\n// //   const handleSubmit = async (event) => {\n// //     event.preventDefault();\n\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/media`,\n// //         {\n// //           method: \"PUT\",\n// //           headers: {\n// //             Authorization: `Bearer ${authToken}`,\n// //             \"Content-Type\": \"application/json\",\n// //           },\n// //           body: JSON.stringify({\n// //             avatar: avatarURL,\n// //             banner: bannerURL,\n// //           }),\n// //         }\n// //       );\n\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to update profile media\");\n// //       }\n\n// //       localStorage.setItem(\"avatarURL\", avatarURL);\n// //       localStorage.setItem(\"bannerURL\", bannerURL);\n\n// //       console.log(\"Avatar and Banner URLs updated successfully!\");\n// //     } catch (error) {\n// //       console.error(\"Error updating profile media:\", error);\n// //       setError(\"Failed to update profile media\");\n// //     }\n// //   };\n\n// //   const handleCreatePostClick = () => {\n// //     setShowCreatePostForm(true);\n// //   };\n\n// //   const handlePostDeleted = async (postId) => {\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n// //         {\n// //           method: \"DELETE\",\n// //           headers: {\n// //             Authorization: `Bearer ${authToken}`,\n// //           },\n// //         }\n// //       );\n\n// //       if (response.ok || response.status === 204) {\n// //         setPosts(posts.filter((post) => post.id !== postId));\n// //         setSuccessMessage(\"Post deleted successfully!\");\n// //         setSuccessMessageVisible(true);\n// //       } else {\n// //         throw new Error(\"Failed to delete post\");\n// //       }\n// //     } catch (error) {\n// //       console.error(\"Error deleting post:\", error);\n// //       setError(\"Failed to delete post\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <Navbar />\n// //       {bannerURL && (\n// //         <div className=\"banner-container\">\n// //           <img src={bannerURL} alt=\"Banner\" className=\"banner-image\" />\n// //         </div>\n// //       )}\n// //       {avatarURL && (\n// //         <div className=\"card\" style={{ width: \"18rem\" }}>\n// //           <img src={avatarURL} className=\"card-img-top\" alt=\"Avatar\" />\n// //           <div className=\"card-body\">\n// //             <p className=\"card-text\">Update your avatar or banner image.</p>\n// //           </div>\n// //         </div>\n// //       )}\n// //       <form onSubmit={handleSubmit}>\n// //         <div>\n// //           <label htmlFor=\"avatarURL\">Avatar URL:</label>\n// //           <input\n// //             type=\"text\"\n// //             id=\"avatarURL\"\n// //             value={avatarURL}\n// //             onChange={handleAvatarURLChange}\n// //           />\n// //         </div>\n// //         <div>\n// //           <label htmlFor=\"bannerURL\">Banner URL:</label>\n// //           <input\n// //             type=\"text\"\n// //             id=\"bannerURL\"\n// //             value={bannerURL}\n// //             onChange={handleBannerURLChange}\n// //           />\n// //         </div>\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n// //       <button onClick={handleCreatePostClick}>Create Post</button>\n// //       {showCreatePostForm && <CreatePostForm />}\n// //       <Link to=\"/posts\">View Posts</Link>\n// //       {error && <p>Error: {error}</p>}\n// //       <h2>Your Posts:</h2>\n// //       {posts.map((post) => (\n// //         <div key={post.id}>\n// //           <h3>{post.title}</h3>\n// //           <p>{post.body}</p>\n// //           <EditPost postId={post.id} />\n// //           <DeletePost postId={post.id} onPostDeleted={handlePostDeleted} />\n// //         </div>\n// //       ))}\n// //       {successMessageVisible && <p>{successMessage}</p>}\n// //     </div>\n// //   );\n// // };\n\n// // export default MyProfile;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import CreatePostForm from \"./Post/CreatePostForm\";\n// import DeletePost from \"./Post/DeletePost\";\n// import EditPost from \"./Post/EditPost\";\n// import \"./MyProfile.css\";\n\n// const MyProfile = () => {\n//   const [avatarURL, setAvatarURL] = useState(\"\");\n//   const [bannerURL, setBannerURL] = useState(\"\");\n//   const [error, setError] = useState(null);\n//   const [showCreatePostForm, setShowCreatePostForm] = useState(false);\n//   const [posts, setPosts] = useState([]);\n//   const [successMessage, setSuccessMessage] = useState(\"\");\n//   const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n\n//   const profileName = localStorage.getItem(\"userName\");\n\n//   useEffect(() => {\n//     const storedAvatarURL = localStorage.getItem(\"avatarURL\");\n//     if (storedAvatarURL) {\n//       setAvatarURL(storedAvatarURL);\n//     }\n\n//     const storedBannerURL = localStorage.getItem(\"bannerURL\");\n//     if (storedBannerURL) {\n//       setBannerURL(storedBannerURL);\n//     }\n\n//     const fetchUserPosts = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/posts`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch user's posts\");\n//         }\n//         const postData = await response.json();\n//         setPosts(postData);\n//       } catch (error) {\n//         console.error(\"Error fetching user's posts:\", error);\n//         setError(\"Failed to fetch user's posts\");\n//       }\n//     };\n\n//     fetchUserPosts();\n//   }, []);\n\n//   const handleAvatarURLChange = (event) => {\n//     setAvatarURL(event.target.value);\n//   };\n\n//   const handleBannerURLChange = (event) => {\n//     setBannerURL(event.target.value);\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/media`,\n//         {\n//           method: \"PUT\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             avatar: avatarURL,\n//             banner: bannerURL,\n//           }),\n//         }\n//       );\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to update profile media\");\n//       }\n\n//       localStorage.setItem(\"avatarURL\", avatarURL);\n//       localStorage.setItem(\"bannerURL\", bannerURL);\n\n//       console.log(\"Avatar and Banner URLs updated successfully!\");\n//     } catch (error) {\n//       console.error(\"Error updating profile media:\", error);\n//       setError(\"Failed to update profile media\");\n//     }\n//   };\n\n//   const handleCreatePostClick = () => {\n//     setShowCreatePostForm(true);\n//   };\n\n//   const handlePostDeleted = async (postId) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n//         {\n//           method: \"DELETE\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n\n//       if (response.ok || response.status === 204) {\n//         setPosts(posts.filter((post) => post.id !== postId));\n//         setSuccessMessage(\"Post deleted successfully!\");\n//         setSuccessMessageVisible(true);\n//       } else {\n//         throw new Error(\"Failed to delete post\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       setError(\"Failed to delete post\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       {/* Banner */}\n//       {bannerURL && (\n//         <div className=\"banner-container\">\n//           <img src={bannerURL} alt=\"Banner\" className=\"banner-image\" />\n//         </div>\n//       )}\n\n//       {/* Profile card */}\n//       <div className=\"card mb-3\" style={{ width: \"24rem\" }}>\n//         <img src={avatarURL} className=\"card-img-top\" alt=\"Avatar\" />\n//         <div className=\"card-body\">\n//           <h5 className=\"card-title\">Profile Images</h5>\n//           <p className=\"card-text\">Update your avatar and banner images.</p>\n//           {/* Form for updating avatar */}\n//           <form onSubmit={handleSubmit}>\n//             <div className=\"form-group\">\n//               <label htmlFor=\"avatarURL\">New Avatar URL:</label>\n//               <input\n//                 type=\"text\"\n//                 id=\"avatarURL\"\n//                 value={avatarURL}\n//                 onChange={handleAvatarURLChange}\n//                 className=\"form-control mb-2\"\n//               />\n//               <button type=\"submit\" className=\"btn btn-primary btn-block\">\n//                 Update Avatar\n//               </button>\n//             </div>\n//           </form>\n\n//           {/* Form for updating banner */}\n//           <form onSubmit={handleSubmit}>\n//             <div className=\"form-group\">\n//               <label htmlFor=\"bannerURL\">New Banner URL:</label>\n//               <input\n//                 type=\"text\"\n//                 id=\"bannerURL\"\n//                 value={bannerURL}\n//                 onChange={handleBannerURLChange}\n//                 className=\"form-control mb-2\"\n//               />\n//               <button type=\"submit\" className=\"btn btn-primary btn-block\">\n//                 Update Banner\n//               </button>\n//             </div>\n//           </form>\n//         </div>\n//       </div>\n\n//       {/* Create Post Section */}\n//       <div className=\"card mb-3\" style={{ width: \"24rem\" }}>\n//         <div className=\"card-body\">\n//           <h5 className=\"card-title\">Create Post</h5>\n//           <button\n//             type=\"button\"\n//             className=\"btn btn-primary btn-block\"\n//             onClick={handleCreatePostClick}\n//           >\n//             Create Post\n//           </button>\n//           {showCreatePostForm && <CreatePostForm />}\n//         </div>\n//       </div>\n\n//       {/* Display user's posts */}\n//       {posts.map((post) => (\n//         <div className=\"card mb-3\" key={post.id}>\n//           <div className=\"card-body\">\n//             <h5 className=\"card-title\">{post.title}</h5>\n//             <p className=\"card-text\">{post.body}</p>\n//             <div className=\"btn-group\" role=\"group\">\n//               <EditPost postId={post.id} />\n//               <DeletePost postId={post.id} onPostDeleted={handlePostDeleted} />\n//             </div>\n//           </div>\n//         </div>\n//       ))}\n\n//       {/* View Posts link */}\n//       <Link to=\"/posts\">View Posts</Link>\n\n//       {/* Error and success messages */}\n//       {error && <p>Error: {error}</p>}\n//       {successMessageVisible && <p>{successMessage}</p>}\n//     </div>\n//   );\n// };\n\n// export default MyProfile;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}