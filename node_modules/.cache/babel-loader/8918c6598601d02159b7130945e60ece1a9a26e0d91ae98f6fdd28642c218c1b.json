{"ast":null,"code":"var _jsxFileName = \"/Users/ecf/holi-exam/src/Pages/MyProfile.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from \"react\";\n// // import { Link } from \"react-router-dom\";\n// // import Navbar from \"../Components/Layouts/Navbar\";\n// // import CreatePostForm from \"./Post/CreatePostForm\";\n// // import DeletePost from \"./Post/DeletePost\";\n// // import EditPost from \"./Post/EditPost\";\n// // import \"./MyProfile.css\";\n\n// // const MyProfile = () => {\n// //   const [avatarURL, setAvatarURL] = useState(\"\");\n// //   const [bannerURL, setBannerURL] = useState(\"\");\n// //   const [error, setError] = useState(null);\n// //   const [showCreatePostForm, setShowCreatePostForm] = useState(false);\n// //   const [posts, setPosts] = useState([]);\n// //   const [successMessage, setSuccessMessage] = useState(\"\");\n// //   const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n\n// //   const profileName = localStorage.getItem(\"userName\");\n\n// //   useEffect(() => {\n// //     const storedAvatarURL = localStorage.getItem(\"avatarURL\");\n// //     if (storedAvatarURL) {\n// //       setAvatarURL(storedAvatarURL);\n// //     }\n\n// //     const storedBannerURL = localStorage.getItem(\"bannerURL\");\n// //     if (storedBannerURL) {\n// //       setBannerURL(storedBannerURL);\n// //     }\n\n// //     const fetchUserPosts = async () => {\n// //       try {\n// //         const authToken = localStorage.getItem(\"accessToken\");\n// //         const response = await fetch(\n// //           `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/posts`,\n// //           {\n// //             headers: {\n// //               Authorization: `Bearer ${authToken}`,\n// //             },\n// //           }\n// //         );\n// //         if (!response.ok) {\n// //           throw new Error(\"Failed to fetch user's posts\");\n// //         }\n// //         const postData = await response.json();\n// //         setPosts(postData);\n// //       } catch (error) {\n// //         console.error(\"Error fetching user's posts:\", error);\n// //         setError(\"Failed to fetch user's posts\");\n// //       }\n// //     };\n\n// //     fetchUserPosts();\n// //   }, []);\n\n// //   const handleAvatarURLChange = (event) => {\n// //     setAvatarURL(event.target.value);\n// //   };\n\n// //   const handleBannerURLChange = (event) => {\n// //     setBannerURL(event.target.value);\n// //   };\n\n// //   const handleSubmit = async (event) => {\n// //     event.preventDefault();\n\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/media`,\n// //         {\n// //           method: \"PUT\",\n// //           headers: {\n// //             Authorization: `Bearer ${authToken}`,\n// //             \"Content-Type\": \"application/json\",\n// //           },\n// //           body: JSON.stringify({\n// //             avatar: avatarURL,\n// //             banner: bannerURL,\n// //           }),\n// //         }\n// //       );\n\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to update profile media\");\n// //       }\n\n// //       localStorage.setItem(\"avatarURL\", avatarURL);\n// //       localStorage.setItem(\"bannerURL\", bannerURL);\n\n// //       console.log(\"Avatar and Banner URLs updated successfully!\");\n// //     } catch (error) {\n// //       console.error(\"Error updating profile media:\", error);\n// //       setError(\"Failed to update profile media\");\n// //     }\n// //   };\n\n// //   const handleCreatePostClick = () => {\n// //     setShowCreatePostForm(true);\n// //   };\n\n// //   const handlePostDeleted = async (postId) => {\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n// //         {\n// //           method: \"DELETE\",\n// //           headers: {\n// //             Authorization: `Bearer ${authToken}`,\n// //           },\n// //         }\n// //       );\n\n// //       if (response.ok || response.status === 204) {\n// //         setPosts(posts.filter((post) => post.id !== postId));\n// //         setSuccessMessage(\"Post deleted successfully!\");\n// //         setSuccessMessageVisible(true);\n// //       } else {\n// //         throw new Error(\"Failed to delete post\");\n// //       }\n// //     } catch (error) {\n// //       console.error(\"Error deleting post:\", error);\n// //       setError(\"Failed to delete post\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <Navbar />\n// //       {bannerURL && (\n// //         <div className=\"banner-container\">\n// //           <img src={bannerURL} alt=\"Banner\" className=\"banner-image\" />\n// //         </div>\n// //       )}\n// //       {avatarURL && (\n// //         <div className=\"card\" style={{ width: \"18rem\" }}>\n// //           <img src={avatarURL} className=\"card-img-top\" alt=\"Avatar\" />\n// //           <div className=\"card-body\">\n// //             <p className=\"card-text\">Update your avatar or banner image.</p>\n// //           </div>\n// //         </div>\n// //       )}\n// //       <form onSubmit={handleSubmit}>\n// //         <div>\n// //           <label htmlFor=\"avatarURL\">Avatar URL:</label>\n// //           <input\n// //             type=\"text\"\n// //             id=\"avatarURL\"\n// //             value={avatarURL}\n// //             onChange={handleAvatarURLChange}\n// //           />\n// //         </div>\n// //         <div>\n// //           <label htmlFor=\"bannerURL\">Banner URL:</label>\n// //           <input\n// //             type=\"text\"\n// //             id=\"bannerURL\"\n// //             value={bannerURL}\n// //             onChange={handleBannerURLChange}\n// //           />\n// //         </div>\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n// //       <button onClick={handleCreatePostClick}>Create Post</button>\n// //       {showCreatePostForm && <CreatePostForm />}\n// //       <Link to=\"/posts\">View Posts</Link>\n// //       {error && <p>Error: {error}</p>}\n// //       <h2>Your Posts:</h2>\n// //       {posts.map((post) => (\n// //         <div key={post.id}>\n// //           <h3>{post.title}</h3>\n// //           <p>{post.body}</p>\n// //           <EditPost postId={post.id} />\n// //           <DeletePost postId={post.id} onPostDeleted={handlePostDeleted} />\n// //         </div>\n// //       ))}\n// //       {successMessageVisible && <p>{successMessage}</p>}\n// //     </div>\n// //   );\n// // };\n\n// // export default MyProfile;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import CreatePostForm from \"./Post/CreatePostForm\";\n// import DeletePost from \"./Post/DeletePost\";\n// import EditPost from \"./Post/EditPost\";\n// import \"./MyProfile.css\";\n\n// const MyProfile = () => {\n//   const [avatarURL, setAvatarURL] = useState(\"\");\n//   const [bannerURL, setBannerURL] = useState(\"\");\n//   const [error, setError] = useState(null);\n//   const [showCreatePostForm, setShowCreatePostForm] = useState(false);\n//   const [posts, setPosts] = useState([]);\n//   const [successMessage, setSuccessMessage] = useState(\"\");\n//   const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n\n//   const profileName = localStorage.getItem(\"userName\");\n\n//   useEffect(() => {\n//     const storedAvatarURL = localStorage.getItem(\"avatarURL\");\n//     if (storedAvatarURL) {\n//       setAvatarURL(storedAvatarURL);\n//     }\n\n//     const storedBannerURL = localStorage.getItem(\"bannerURL\");\n//     if (storedBannerURL) {\n//       setBannerURL(storedBannerURL);\n//     }\n\n//     const fetchUserPosts = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/posts`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch user's posts\");\n//         }\n//         const postData = await response.json();\n//         setPosts(postData);\n//       } catch (error) {\n//         console.error(\"Error fetching user's posts:\", error);\n//         setError(\"Failed to fetch user's posts\");\n//       }\n//     };\n\n//     fetchUserPosts();\n//   }, []);\n\n//   const handleAvatarURLChange = (event) => {\n//     setAvatarURL(event.target.value);\n//   };\n\n//   const handleBannerURLChange = (event) => {\n//     setBannerURL(event.target.value);\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/media`,\n//         {\n//           method: \"PUT\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             avatar: avatarURL,\n//             banner: bannerURL,\n//           }),\n//         }\n//       );\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to update profile media\");\n//       }\n\n//       localStorage.setItem(\"avatarURL\", avatarURL);\n//       localStorage.setItem(\"bannerURL\", bannerURL);\n\n//       console.log(\"Avatar and Banner URLs updated successfully!\");\n//     } catch (error) {\n//       console.error(\"Error updating profile media:\", error);\n//       setError(\"Failed to update profile media\");\n//     }\n//   };\n\n//   const handleCreatePostClick = () => {\n//     setShowCreatePostForm(true);\n//   };\n\n//   const handlePostDeleted = async (postId) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n//         {\n//           method: \"DELETE\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n\n//       if (response.ok || response.status === 204) {\n//         setPosts(posts.filter((post) => post.id !== postId));\n//         setSuccessMessage(\"Post deleted successfully!\");\n//         setSuccessMessageVisible(true);\n//       } else {\n//         throw new Error(\"Failed to delete post\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       setError(\"Failed to delete post\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       {/* Banner */}\n//       {bannerURL && (\n//         <div className=\"banner-container\">\n//           <img src={bannerURL} alt=\"Banner\" className=\"banner-image\" />\n//         </div>\n//       )}\n\n//       {/* Profile card */}\n//       <div className=\"card mb-3\" style={{ width: \"24rem\" }}>\n//         <img src={avatarURL} className=\"card-img-top\" alt=\"Avatar\" />\n//         <div className=\"card-body\">\n//           <h5 className=\"card-title\">Profile Images</h5>\n//           <p className=\"card-text\">Update your avatar and banner images.</p>\n//           {/* Form for updating avatar */}\n//           <form onSubmit={handleSubmit}>\n//             <div className=\"form-group\">\n//               <label htmlFor=\"avatarURL\">New Avatar URL:</label>\n//               <input\n//                 type=\"text\"\n//                 id=\"avatarURL\"\n//                 value={avatarURL}\n//                 onChange={handleAvatarURLChange}\n//                 className=\"form-control mb-2\"\n//               />\n//               <button type=\"submit\" className=\"btn btn-primary btn-block\">\n//                 Update Avatar\n//               </button>\n//             </div>\n//           </form>\n\n//           {/* Form for updating banner */}\n//           <form onSubmit={handleSubmit}>\n//             <div className=\"form-group\">\n//               <label htmlFor=\"bannerURL\">New Banner URL:</label>\n//               <input\n//                 type=\"text\"\n//                 id=\"bannerURL\"\n//                 value={bannerURL}\n//                 onChange={handleBannerURLChange}\n//                 className=\"form-control mb-2\"\n//               />\n//               <button type=\"submit\" className=\"btn btn-primary btn-block\">\n//                 Update Banner\n//               </button>\n//             </div>\n//           </form>\n//         </div>\n//       </div>\n\n//       {/* Create Post Section */}\n//       <div className=\"card mb-3\" style={{ width: \"24rem\" }}>\n//         <div className=\"card-body\">\n//           <h5 className=\"card-title\">Create Post</h5>\n//           <button\n//             type=\"button\"\n//             className=\"btn btn-primary btn-block\"\n//             onClick={handleCreatePostClick}\n//           >\n//             Create Post\n//           </button>\n//           {showCreatePostForm && <CreatePostForm />}\n//         </div>\n//       </div>\n\n//       {/* Display user's posts */}\n//       {posts.map((post) => (\n//         <div className=\"card mb-3\" key={post.id}>\n//           <div className=\"card-body\">\n//             <h5 className=\"card-title\">{post.title}</h5>\n//             <p className=\"card-text\">{post.body}</p>\n//             <div className=\"btn-group\" role=\"group\">\n//               <EditPost postId={post.id} />\n//               <DeletePost postId={post.id} onPostDeleted={handlePostDeleted} />\n//             </div>\n//           </div>\n//         </div>\n//       ))}\n\n//       {/* View Posts link */}\n//       <Link to=\"/posts\">View Posts</Link>\n\n//       {/* Error and success messages */}\n//       {error && <p>Error: {error}</p>}\n//       {successMessageVisible && <p>{successMessage}</p>}\n//     </div>\n//   );\n// };\n\n// export default MyProfile;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Navbar from \"../Components/Layouts/Navbar\";\nimport CreatePostForm from \"./Post/CreatePostForm\";\nimport DeletePost from \"./Post/DeletePost\";\nimport EditPost from \"./Post/EditPost\";\nimport \"./MyProfile.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyProfile = () => {\n  _s();\n  const [avatarURL, setAvatarURL] = useState(\"\");\n  const [bannerURL, setBannerURL] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [showCreatePostForm, setShowCreatePostForm] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n  const [modalType, setModalType] = useState(\"\"); // To track which modal to open\n\n  const profileName = localStorage.getItem(\"userName\");\n  useEffect(() => {\n    const storedAvatarURL = localStorage.getItem(\"avatarURL\");\n    if (storedAvatarURL) {\n      setAvatarURL(storedAvatarURL);\n    }\n    const storedBannerURL = localStorage.getItem(\"bannerURL\");\n    if (storedBannerURL) {\n      setBannerURL(storedBannerURL);\n    }\n    const fetchUserPosts = async () => {\n      try {\n        const authToken = localStorage.getItem(\"accessToken\");\n        const response = await fetch(`https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/posts`, {\n          headers: {\n            Authorization: `Bearer ${authToken}`\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch user's posts\");\n        }\n        const postData = await response.json();\n        setPosts(postData);\n      } catch (error) {\n        console.error(\"Error fetching user's posts:\", error);\n        setError(\"Failed to fetch user's posts\");\n      }\n    };\n    fetchUserPosts();\n  }, []);\n  const handleAvatarChangeClick = () => {\n    setModalType(\"avatar\");\n  };\n  const handleBannerChangeClick = () => {\n    setModalType(\"banner\");\n  };\n  const handleModalSubmit = event => {\n    event.preventDefault();\n    // Logic to submit changes based on modal type (avatar or banner)\n    // ...\n    // Clear modal state after submission\n    setModalType(\"\");\n  };\n  const handleCreatePostClick = () => {\n    setShowCreatePostForm(true);\n  };\n  const handlePostDeleted = async postId => {\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(`https://nf-api.onrender.com/api/v1/social/posts/${postId}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n      if (response.ok || response.status === 204) {\n        setPosts(posts.filter(post => post.id !== postId));\n        setSuccessMessage(\"Post deleted successfully!\");\n        setSuccessMessageVisible(true);\n      } else {\n        throw new Error(\"Failed to delete post\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting post:\", error);\n      setError(\"Failed to delete post\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }, this), bannerURL && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"banner-container\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: bannerURL,\n        alt: \"Banner\",\n        className: \"banner-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card mb-3\",\n      style: {\n        width: \"24rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: avatarURL,\n        className: \"card-img-top\",\n        alt: \"Avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"card-title\",\n          children: \"Profile Images\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: \"Update your avatar and banner images.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary mb-2\",\n          onClick: handleAvatarChangeClick,\n          children: \"Change Avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: handleBannerChangeClick,\n          children: \"Change Banner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card mb-3\",\n      style: {\n        width: \"24rem\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"card-title\",\n          children: \"Create Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary btn-block\",\n          onClick: handleCreatePostClick,\n          children: \"Create Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 11\n        }, this), showCreatePostForm && /*#__PURE__*/_jsxDEV(CreatePostForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 7\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"card-title\",\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn-group\",\n          role: \"group\",\n          children: [/*#__PURE__*/_jsxDEV(EditPost, {\n            postId: post.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DeletePost, {\n            postId: post.id,\n            onPostDeleted: handlePostDeleted\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 11\n      }, this)\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/posts\",\n      children: \"View Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 17\n    }, this), successMessageVisible && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 33\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal fade\",\n      id: \"changeImageModal\",\n      tabIndex: \"-1\",\n      \"aria-labelledby\": \"exampleModalLabel\",\n      \"aria-hidden\": \"true\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-dialog\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"modal-title\",\n              id: \"exampleModalLabel\",\n              children: modalType === \"avatar\" ? \"Change Avatar\" : \"Change Banner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-primary mb-2\",\n              \"data-bs-toggle\": \"modal\",\n              \"data-bs-target\": \"#changeAvatarModal\",\n              children: \"Change Avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleModalSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"imageUrl\",\n                className: \"form-label\",\n                children: [\"Enter \", modalType === \"avatar\" ? \"Avatar\" : \"Banner\", \" URL:\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 609,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"form-control\",\n                id: \"imageUrl\",\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 612,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 608,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-footer\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn btn-primary\",\n                \"data-bs-toggle\": \"modal\",\n                \"data-bs-target\": \"#changeBannerModal\",\n                children: \"Change Banner\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 620,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 619,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 513,\n    columnNumber: 5\n  }, this);\n};\n_s(MyProfile, \"fo2CE/Ub4eyxURWw7R3WadM7G2A=\");\n_c = MyProfile;\nexport default MyProfile;\nvar _c;\n$RefreshReg$(_c, \"MyProfile\");","map":{"version":3,"names":["React","useState","useEffect","Link","Navbar","CreatePostForm","DeletePost","EditPost","jsxDEV","_jsxDEV","MyProfile","_s","avatarURL","setAvatarURL","bannerURL","setBannerURL","error","setError","showCreatePostForm","setShowCreatePostForm","posts","setPosts","successMessage","setSuccessMessage","successMessageVisible","setSuccessMessageVisible","modalType","setModalType","profileName","localStorage","getItem","storedAvatarURL","storedBannerURL","fetchUserPosts","authToken","response","fetch","headers","Authorization","ok","Error","postData","json","console","handleAvatarChangeClick","handleBannerChangeClick","handleModalSubmit","event","preventDefault","handleCreatePostClick","handlePostDeleted","postId","method","status","filter","post","id","children","fileName","_jsxFileName","lineNumber","columnNumber","className","src","alt","style","width","type","onClick","map","title","body","role","onPostDeleted","to","tabIndex","onSubmit","htmlFor","required","_c","$RefreshReg$"],"sources":["/Users/ecf/holi-exam/src/Pages/MyProfile.js"],"sourcesContent":["// // import React, { useState, useEffect } from \"react\";\n// // import { Link } from \"react-router-dom\";\n// // import Navbar from \"../Components/Layouts/Navbar\";\n// // import CreatePostForm from \"./Post/CreatePostForm\";\n// // import DeletePost from \"./Post/DeletePost\";\n// // import EditPost from \"./Post/EditPost\";\n// // import \"./MyProfile.css\";\n\n// // const MyProfile = () => {\n// //   const [avatarURL, setAvatarURL] = useState(\"\");\n// //   const [bannerURL, setBannerURL] = useState(\"\");\n// //   const [error, setError] = useState(null);\n// //   const [showCreatePostForm, setShowCreatePostForm] = useState(false);\n// //   const [posts, setPosts] = useState([]);\n// //   const [successMessage, setSuccessMessage] = useState(\"\");\n// //   const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n\n// //   const profileName = localStorage.getItem(\"userName\");\n\n// //   useEffect(() => {\n// //     const storedAvatarURL = localStorage.getItem(\"avatarURL\");\n// //     if (storedAvatarURL) {\n// //       setAvatarURL(storedAvatarURL);\n// //     }\n\n// //     const storedBannerURL = localStorage.getItem(\"bannerURL\");\n// //     if (storedBannerURL) {\n// //       setBannerURL(storedBannerURL);\n// //     }\n\n// //     const fetchUserPosts = async () => {\n// //       try {\n// //         const authToken = localStorage.getItem(\"accessToken\");\n// //         const response = await fetch(\n// //           `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/posts`,\n// //           {\n// //             headers: {\n// //               Authorization: `Bearer ${authToken}`,\n// //             },\n// //           }\n// //         );\n// //         if (!response.ok) {\n// //           throw new Error(\"Failed to fetch user's posts\");\n// //         }\n// //         const postData = await response.json();\n// //         setPosts(postData);\n// //       } catch (error) {\n// //         console.error(\"Error fetching user's posts:\", error);\n// //         setError(\"Failed to fetch user's posts\");\n// //       }\n// //     };\n\n// //     fetchUserPosts();\n// //   }, []);\n\n// //   const handleAvatarURLChange = (event) => {\n// //     setAvatarURL(event.target.value);\n// //   };\n\n// //   const handleBannerURLChange = (event) => {\n// //     setBannerURL(event.target.value);\n// //   };\n\n// //   const handleSubmit = async (event) => {\n// //     event.preventDefault();\n\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/media`,\n// //         {\n// //           method: \"PUT\",\n// //           headers: {\n// //             Authorization: `Bearer ${authToken}`,\n// //             \"Content-Type\": \"application/json\",\n// //           },\n// //           body: JSON.stringify({\n// //             avatar: avatarURL,\n// //             banner: bannerURL,\n// //           }),\n// //         }\n// //       );\n\n// //       if (!response.ok) {\n// //         throw new Error(\"Failed to update profile media\");\n// //       }\n\n// //       localStorage.setItem(\"avatarURL\", avatarURL);\n// //       localStorage.setItem(\"bannerURL\", bannerURL);\n\n// //       console.log(\"Avatar and Banner URLs updated successfully!\");\n// //     } catch (error) {\n// //       console.error(\"Error updating profile media:\", error);\n// //       setError(\"Failed to update profile media\");\n// //     }\n// //   };\n\n// //   const handleCreatePostClick = () => {\n// //     setShowCreatePostForm(true);\n// //   };\n\n// //   const handlePostDeleted = async (postId) => {\n// //     try {\n// //       const authToken = localStorage.getItem(\"accessToken\");\n\n// //       const response = await fetch(\n// //         `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n// //         {\n// //           method: \"DELETE\",\n// //           headers: {\n// //             Authorization: `Bearer ${authToken}`,\n// //           },\n// //         }\n// //       );\n\n// //       if (response.ok || response.status === 204) {\n// //         setPosts(posts.filter((post) => post.id !== postId));\n// //         setSuccessMessage(\"Post deleted successfully!\");\n// //         setSuccessMessageVisible(true);\n// //       } else {\n// //         throw new Error(\"Failed to delete post\");\n// //       }\n// //     } catch (error) {\n// //       console.error(\"Error deleting post:\", error);\n// //       setError(\"Failed to delete post\");\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <Navbar />\n// //       {bannerURL && (\n// //         <div className=\"banner-container\">\n// //           <img src={bannerURL} alt=\"Banner\" className=\"banner-image\" />\n// //         </div>\n// //       )}\n// //       {avatarURL && (\n// //         <div className=\"card\" style={{ width: \"18rem\" }}>\n// //           <img src={avatarURL} className=\"card-img-top\" alt=\"Avatar\" />\n// //           <div className=\"card-body\">\n// //             <p className=\"card-text\">Update your avatar or banner image.</p>\n// //           </div>\n// //         </div>\n// //       )}\n// //       <form onSubmit={handleSubmit}>\n// //         <div>\n// //           <label htmlFor=\"avatarURL\">Avatar URL:</label>\n// //           <input\n// //             type=\"text\"\n// //             id=\"avatarURL\"\n// //             value={avatarURL}\n// //             onChange={handleAvatarURLChange}\n// //           />\n// //         </div>\n// //         <div>\n// //           <label htmlFor=\"bannerURL\">Banner URL:</label>\n// //           <input\n// //             type=\"text\"\n// //             id=\"bannerURL\"\n// //             value={bannerURL}\n// //             onChange={handleBannerURLChange}\n// //           />\n// //         </div>\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n// //       <button onClick={handleCreatePostClick}>Create Post</button>\n// //       {showCreatePostForm && <CreatePostForm />}\n// //       <Link to=\"/posts\">View Posts</Link>\n// //       {error && <p>Error: {error}</p>}\n// //       <h2>Your Posts:</h2>\n// //       {posts.map((post) => (\n// //         <div key={post.id}>\n// //           <h3>{post.title}</h3>\n// //           <p>{post.body}</p>\n// //           <EditPost postId={post.id} />\n// //           <DeletePost postId={post.id} onPostDeleted={handlePostDeleted} />\n// //         </div>\n// //       ))}\n// //       {successMessageVisible && <p>{successMessage}</p>}\n// //     </div>\n// //   );\n// // };\n\n// // export default MyProfile;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import CreatePostForm from \"./Post/CreatePostForm\";\n// import DeletePost from \"./Post/DeletePost\";\n// import EditPost from \"./Post/EditPost\";\n// import \"./MyProfile.css\";\n\n// const MyProfile = () => {\n//   const [avatarURL, setAvatarURL] = useState(\"\");\n//   const [bannerURL, setBannerURL] = useState(\"\");\n//   const [error, setError] = useState(null);\n//   const [showCreatePostForm, setShowCreatePostForm] = useState(false);\n//   const [posts, setPosts] = useState([]);\n//   const [successMessage, setSuccessMessage] = useState(\"\");\n//   const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n\n//   const profileName = localStorage.getItem(\"userName\");\n\n//   useEffect(() => {\n//     const storedAvatarURL = localStorage.getItem(\"avatarURL\");\n//     if (storedAvatarURL) {\n//       setAvatarURL(storedAvatarURL);\n//     }\n\n//     const storedBannerURL = localStorage.getItem(\"bannerURL\");\n//     if (storedBannerURL) {\n//       setBannerURL(storedBannerURL);\n//     }\n\n//     const fetchUserPosts = async () => {\n//       try {\n//         const authToken = localStorage.getItem(\"accessToken\");\n//         const response = await fetch(\n//           `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/posts`,\n//           {\n//             headers: {\n//               Authorization: `Bearer ${authToken}`,\n//             },\n//           }\n//         );\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch user's posts\");\n//         }\n//         const postData = await response.json();\n//         setPosts(postData);\n//       } catch (error) {\n//         console.error(\"Error fetching user's posts:\", error);\n//         setError(\"Failed to fetch user's posts\");\n//       }\n//     };\n\n//     fetchUserPosts();\n//   }, []);\n\n//   const handleAvatarURLChange = (event) => {\n//     setAvatarURL(event.target.value);\n//   };\n\n//   const handleBannerURLChange = (event) => {\n//     setBannerURL(event.target.value);\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/media`,\n//         {\n//           method: \"PUT\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             avatar: avatarURL,\n//             banner: bannerURL,\n//           }),\n//         }\n//       );\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to update profile media\");\n//       }\n\n//       localStorage.setItem(\"avatarURL\", avatarURL);\n//       localStorage.setItem(\"bannerURL\", bannerURL);\n\n//       console.log(\"Avatar and Banner URLs updated successfully!\");\n//     } catch (error) {\n//       console.error(\"Error updating profile media:\", error);\n//       setError(\"Failed to update profile media\");\n//     }\n//   };\n\n//   const handleCreatePostClick = () => {\n//     setShowCreatePostForm(true);\n//   };\n\n//   const handlePostDeleted = async (postId) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n//         {\n//           method: \"DELETE\",\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n\n//       if (response.ok || response.status === 204) {\n//         setPosts(posts.filter((post) => post.id !== postId));\n//         setSuccessMessage(\"Post deleted successfully!\");\n//         setSuccessMessageVisible(true);\n//       } else {\n//         throw new Error(\"Failed to delete post\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       setError(\"Failed to delete post\");\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <Navbar />\n//       {/* Banner */}\n//       {bannerURL && (\n//         <div className=\"banner-container\">\n//           <img src={bannerURL} alt=\"Banner\" className=\"banner-image\" />\n//         </div>\n//       )}\n\n//       {/* Profile card */}\n//       <div className=\"card mb-3\" style={{ width: \"24rem\" }}>\n//         <img src={avatarURL} className=\"card-img-top\" alt=\"Avatar\" />\n//         <div className=\"card-body\">\n//           <h5 className=\"card-title\">Profile Images</h5>\n//           <p className=\"card-text\">Update your avatar and banner images.</p>\n//           {/* Form for updating avatar */}\n//           <form onSubmit={handleSubmit}>\n//             <div className=\"form-group\">\n//               <label htmlFor=\"avatarURL\">New Avatar URL:</label>\n//               <input\n//                 type=\"text\"\n//                 id=\"avatarURL\"\n//                 value={avatarURL}\n//                 onChange={handleAvatarURLChange}\n//                 className=\"form-control mb-2\"\n//               />\n//               <button type=\"submit\" className=\"btn btn-primary btn-block\">\n//                 Update Avatar\n//               </button>\n//             </div>\n//           </form>\n\n//           {/* Form for updating banner */}\n//           <form onSubmit={handleSubmit}>\n//             <div className=\"form-group\">\n//               <label htmlFor=\"bannerURL\">New Banner URL:</label>\n//               <input\n//                 type=\"text\"\n//                 id=\"bannerURL\"\n//                 value={bannerURL}\n//                 onChange={handleBannerURLChange}\n//                 className=\"form-control mb-2\"\n//               />\n//               <button type=\"submit\" className=\"btn btn-primary btn-block\">\n//                 Update Banner\n//               </button>\n//             </div>\n//           </form>\n//         </div>\n//       </div>\n\n//       {/* Create Post Section */}\n//       <div className=\"card mb-3\" style={{ width: \"24rem\" }}>\n//         <div className=\"card-body\">\n//           <h5 className=\"card-title\">Create Post</h5>\n//           <button\n//             type=\"button\"\n//             className=\"btn btn-primary btn-block\"\n//             onClick={handleCreatePostClick}\n//           >\n//             Create Post\n//           </button>\n//           {showCreatePostForm && <CreatePostForm />}\n//         </div>\n//       </div>\n\n//       {/* Display user's posts */}\n//       {posts.map((post) => (\n//         <div className=\"card mb-3\" key={post.id}>\n//           <div className=\"card-body\">\n//             <h5 className=\"card-title\">{post.title}</h5>\n//             <p className=\"card-text\">{post.body}</p>\n//             <div className=\"btn-group\" role=\"group\">\n//               <EditPost postId={post.id} />\n//               <DeletePost postId={post.id} onPostDeleted={handlePostDeleted} />\n//             </div>\n//           </div>\n//         </div>\n//       ))}\n\n//       {/* View Posts link */}\n//       <Link to=\"/posts\">View Posts</Link>\n\n//       {/* Error and success messages */}\n//       {error && <p>Error: {error}</p>}\n//       {successMessageVisible && <p>{successMessage}</p>}\n//     </div>\n//   );\n// };\n\n// export default MyProfile;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Navbar from \"../Components/Layouts/Navbar\";\nimport CreatePostForm from \"./Post/CreatePostForm\";\nimport DeletePost from \"./Post/DeletePost\";\nimport EditPost from \"./Post/EditPost\";\nimport \"./MyProfile.css\";\n\nconst MyProfile = () => {\n  const [avatarURL, setAvatarURL] = useState(\"\");\n  const [bannerURL, setBannerURL] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [showCreatePostForm, setShowCreatePostForm] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [successMessageVisible, setSuccessMessageVisible] = useState(false);\n  const [modalType, setModalType] = useState(\"\"); // To track which modal to open\n\n  const profileName = localStorage.getItem(\"userName\");\n\n  useEffect(() => {\n    const storedAvatarURL = localStorage.getItem(\"avatarURL\");\n    if (storedAvatarURL) {\n      setAvatarURL(storedAvatarURL);\n    }\n\n    const storedBannerURL = localStorage.getItem(\"bannerURL\");\n    if (storedBannerURL) {\n      setBannerURL(storedBannerURL);\n    }\n\n    const fetchUserPosts = async () => {\n      try {\n        const authToken = localStorage.getItem(\"accessToken\");\n        const response = await fetch(\n          `https://nf-api.onrender.com/api/v1/social/profiles/${profileName}/posts`,\n          {\n            headers: {\n              Authorization: `Bearer ${authToken}`,\n            },\n          }\n        );\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch user's posts\");\n        }\n        const postData = await response.json();\n        setPosts(postData);\n      } catch (error) {\n        console.error(\"Error fetching user's posts:\", error);\n        setError(\"Failed to fetch user's posts\");\n      }\n    };\n\n    fetchUserPosts();\n  }, []);\n\n  const handleAvatarChangeClick = () => {\n    setModalType(\"avatar\");\n  };\n\n  const handleBannerChangeClick = () => {\n    setModalType(\"banner\");\n  };\n\n  const handleModalSubmit = (event) => {\n    event.preventDefault();\n    // Logic to submit changes based on modal type (avatar or banner)\n    // ...\n    // Clear modal state after submission\n    setModalType(\"\");\n  };\n\n  const handleCreatePostClick = () => {\n    setShowCreatePostForm(true);\n  };\n\n  const handlePostDeleted = async (postId) => {\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n\n      const response = await fetch(\n        `https://nf-api.onrender.com/api/v1/social/posts/${postId}`,\n        {\n          method: \"DELETE\",\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n          },\n        }\n      );\n\n      if (response.ok || response.status === 204) {\n        setPosts(posts.filter((post) => post.id !== postId));\n        setSuccessMessage(\"Post deleted successfully!\");\n        setSuccessMessageVisible(true);\n      } else {\n        throw new Error(\"Failed to delete post\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting post:\", error);\n      setError(\"Failed to delete post\");\n    }\n  };\n\n  return (\n    <div>\n      <Navbar />\n      {/* Banner */}\n      {bannerURL && (\n        <div className=\"banner-container\">\n          <img src={bannerURL} alt=\"Banner\" className=\"banner-image\" />\n        </div>\n      )}\n\n      {/* Profile card */}\n      <div className=\"card mb-3\" style={{ width: \"24rem\" }}>\n        <img src={avatarURL} className=\"card-img-top\" alt=\"Avatar\" />\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">Profile Images</h5>\n          <p className=\"card-text\">Update your avatar and banner images.</p>\n          {/* Button for updating avatar */}\n          <button\n            type=\"button\"\n            className=\"btn btn-primary mb-2\"\n            onClick={handleAvatarChangeClick}\n          >\n            Change Avatar\n          </button>\n\n          {/* Button for updating banner */}\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={handleBannerChangeClick}\n          >\n            Change Banner\n          </button>\n        </div>\n      </div>\n\n      {/* Create Post Section */}\n      <div className=\"card mb-3\" style={{ width: \"24rem\" }}>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">Create Post</h5>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary btn-block\"\n            onClick={handleCreatePostClick}\n          >\n            Create Post\n          </button>\n          {showCreatePostForm && <CreatePostForm />}\n        </div>\n      </div>\n\n      {/* Display user's posts */}\n      {posts.map((post) => (\n        <div className=\"card mb-3\" key={post.id}>\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">{post.title}</h5>\n            <p className=\"card-text\">{post.body}</p>\n            <div className=\"btn-group\" role=\"group\">\n              <EditPost postId={post.id} />\n              <DeletePost postId={post.id} onPostDeleted={handlePostDeleted} />\n            </div>\n          </div>\n        </div>\n      ))}\n\n      {/* View Posts link */}\n      <Link to=\"/posts\">View Posts</Link>\n\n      {/* Error and success messages */}\n      {error && <p>Error: {error}</p>}\n      {successMessageVisible && <p>{successMessage}</p>}\n\n      {/* Modal for changing avatar or banner */}\n      <div\n        className=\"modal fade\"\n        id=\"changeImageModal\"\n        tabIndex=\"-1\"\n        aria-labelledby=\"exampleModalLabel\"\n        aria-hidden=\"true\"\n      >\n        <div className=\"modal-dialog\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n                {modalType === \"avatar\" ? \"Change Avatar\" : \"Change Banner\"}\n              </h5>\n              <button\n                type=\"button\"\n                className=\"btn btn-primary mb-2\"\n                data-bs-toggle=\"modal\"\n                data-bs-target=\"#changeAvatarModal\"\n              >\n                Change Avatar\n              </button>\n            </div>\n            <form onSubmit={handleModalSubmit}>\n              <div className=\"modal-body\">\n                <label htmlFor=\"imageUrl\" className=\"form-label\">\n                  Enter {modalType === \"avatar\" ? \"Avatar\" : \"Banner\"} URL:\n                </label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"imageUrl\"\n                  required\n                />\n              </div>\n              <div className=\"modal-footer\">\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary\"\n                  data-bs-toggle=\"modal\"\n                  data-bs-target=\"#changeBannerModal\"\n                >\n                  Change Banner\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MyProfile;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAOC,cAAc,MAAM,uBAAuB;AAClD,OAAOC,UAAU,MAAM,mBAAmB;AAC1C,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACiB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACnE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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}