{"ast":null,"code":"var _jsxFileName = \"/Users/ecf/holi-exam/src/Pages/Post/CreatePostForm.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n\n// const CreatePostForm = ({ onPostCreated }) => {\n//   const [title, setTitle] = useState(\"\");\n//   const [body, setBody] = useState(\"\");\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         \"https://nf-api.onrender.com/api/v1/social/posts\",\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ title, body }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to create post\");\n//       }\n//       console.log(\"Post created successfully!\");\n//       onPostCreated();\n//     } catch (error) {\n//       console.error(\"Error creating post:\", error);\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div>\n//         <label htmlFor=\"title\">Title:</label>\n//         <input\n//           type=\"text\"\n//           id=\"title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label htmlFor=\"body\">Body:</label>\n//         <textarea\n//           id=\"body\"\n//           value={body}\n//           onChange={(e) => setBody(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\">Create Post</button>\n//     </form>\n//   );\n// };\n\n// export default CreatePostForm;\n\n// import React, { useState } from \"react\";\n\n// const CreatePostForm = ({ onPostCreated }) => {\n//   const [title, setTitle] = useState(\"\");\n//   const [body, setBody] = useState(\"\");\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         \"https://nf-api.onrender.com/api/v1/social/posts\",\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ title, body }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to create post\");\n//       }\n//       console.log(\"Post created successfully!\");\n//       if (typeof onPostCreated === \"function\") {\n//         onPostCreated();\n//       }\n//     } catch (error) {\n//       console.error(\"Error creating post:\", error);\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div>\n//         <label htmlFor=\"title\">Title:</label>\n//         <input\n//           type=\"text\"\n//           id=\"title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label htmlFor=\"body\">Body:</label>\n//         <textarea\n//           id=\"body\"\n//           value={body}\n//           onChange={(e) => setBody(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\">Create Post</button>\n//     </form>\n//   );\n// };\n\n// export default CreatePostForm;\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreatePostForm = ({\n  onPostCreated\n}) => {\n  _s();\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(\"https://nf-api.onrender.com/api/v1/social/posts\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          title,\n          body\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to create post\");\n      }\n      console.log(\"Post created successfully!\");\n      if (typeof onPostCreated === \"function\") {\n        onPostCreated();\n      }\n      setShowSuccessMessage(true);\n      setTitle(\"\");\n      setBody(\"\");\n      setTimeout(() => {\n        setShowSuccessMessage(false);\n      }, 3000);\n    } catch (error) {\n      console.error(\"Error creating post:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"title\",\n        children: \"Title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"title\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"body\",\n        children: \"Body:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"body\",\n        value: body,\n        onChange: e => setBody(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Create Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), showSuccessMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Post created successfully!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_s(CreatePostForm, \"v1U9g67b8jNgm5O5hscUf3R7Lzs=\");\n_c = CreatePostForm;\nexport default CreatePostForm;\nvar _c;\n$RefreshReg$(_c, \"CreatePostForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CreatePostForm","onPostCreated","_s","title","setTitle","body","setBody","showSuccessMessage","setShowSuccessMessage","handleSubmit","e","preventDefault","authToken","localStorage","getItem","response","fetch","method","headers","Authorization","JSON","stringify","ok","Error","console","log","setTimeout","error","onSubmit","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/Users/ecf/holi-exam/src/Pages/Post/CreatePostForm.js"],"sourcesContent":["// import React, { useState } from \"react\";\n\n// const CreatePostForm = ({ onPostCreated }) => {\n//   const [title, setTitle] = useState(\"\");\n//   const [body, setBody] = useState(\"\");\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         \"https://nf-api.onrender.com/api/v1/social/posts\",\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ title, body }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to create post\");\n//       }\n//       console.log(\"Post created successfully!\");\n//       onPostCreated();\n//     } catch (error) {\n//       console.error(\"Error creating post:\", error);\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div>\n//         <label htmlFor=\"title\">Title:</label>\n//         <input\n//           type=\"text\"\n//           id=\"title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label htmlFor=\"body\">Body:</label>\n//         <textarea\n//           id=\"body\"\n//           value={body}\n//           onChange={(e) => setBody(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\">Create Post</button>\n//     </form>\n//   );\n// };\n\n// export default CreatePostForm;\n\n// import React, { useState } from \"react\";\n\n// const CreatePostForm = ({ onPostCreated }) => {\n//   const [title, setTitle] = useState(\"\");\n//   const [body, setBody] = useState(\"\");\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         \"https://nf-api.onrender.com/api/v1/social/posts\",\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ title, body }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to create post\");\n//       }\n//       console.log(\"Post created successfully!\");\n//       if (typeof onPostCreated === \"function\") {\n//         onPostCreated();\n//       }\n//     } catch (error) {\n//       console.error(\"Error creating post:\", error);\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div>\n//         <label htmlFor=\"title\">Title:</label>\n//         <input\n//           type=\"text\"\n//           id=\"title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <div>\n//         <label htmlFor=\"body\">Body:</label>\n//         <textarea\n//           id=\"body\"\n//           value={body}\n//           onChange={(e) => setBody(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <button type=\"submit\">Create Post</button>\n//     </form>\n//   );\n// };\n\n// export default CreatePostForm;\n\nimport React, { useState } from \"react\";\n\nconst CreatePostForm = ({ onPostCreated }) => {\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(\n        \"https://nf-api.onrender.com/api/v1/social/posts\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${authToken}`,\n          },\n          body: JSON.stringify({ title, body }),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to create post\");\n      }\n      console.log(\"Post created successfully!\");\n      if (typeof onPostCreated === \"function\") {\n        onPostCreated();\n      }\n      setShowSuccessMessage(true);\n      setTitle(\"\");\n      setBody(\"\");\n      setTimeout(() => {\n        setShowSuccessMessage(false);\n      }, 3000);\n    } catch (error) {\n      console.error(\"Error creating post:\", error);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor=\"title\">Title:</label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          required\n        />\n      </div>\n      <div>\n        <label htmlFor=\"body\">Body:</label>\n        <textarea\n          id=\"body\"\n          value={body}\n          onChange={(e) => setBody(e.target.value)}\n          required\n        />\n      </div>\n      <button type=\"submit\">Create Post</button>\n      {showSuccessMessage && <p>Post created successfully!</p>}\n    </form>\n  );\n};\n\nexport default CreatePostForm;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACU,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEnE,MAAMY,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;MACrD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,iDAAiD,EACjD;QACEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAG,UAASP,SAAU;QACrC,CAAC;QACDP,IAAI,EAAEe,IAAI,CAACC,SAAS,CAAC;UAAElB,KAAK;UAAEE;QAAK,CAAC;MACtC,CACF,CAAC;MACD,IAAI,CAACU,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACAC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC,IAAI,OAAOxB,aAAa,KAAK,UAAU,EAAE;QACvCA,aAAa,CAAC,CAAC;MACjB;MACAO,qBAAqB,CAAC,IAAI,CAAC;MAC3BJ,QAAQ,CAAC,EAAE,CAAC;MACZE,OAAO,CAAC,EAAE,CAAC;MACXoB,UAAU,CAAC,MAAM;QACflB,qBAAqB,CAAC,KAAK,CAAC;MAC9B,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,oBACE5B,OAAA;IAAM6B,QAAQ,EAAEnB,YAAa;IAAAoB,QAAA,gBAC3B9B,OAAA;MAAA8B,QAAA,gBACE9B,OAAA;QAAO+B,OAAO,EAAC,OAAO;QAAAD,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACrCnC,OAAA;QACEoC,IAAI,EAAC,MAAM;QACXC,EAAE,EAAC,OAAO;QACVC,KAAK,EAAElC,KAAM;QACbmC,QAAQ,EAAG5B,CAAC,IAAKN,QAAQ,CAACM,CAAC,CAAC6B,MAAM,CAACF,KAAK,CAAE;QAC1CG,QAAQ;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNnC,OAAA;MAAA8B,QAAA,gBACE9B,OAAA;QAAO+B,OAAO,EAAC,MAAM;QAAAD,QAAA,EAAC;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACnCnC,OAAA;QACEqC,EAAE,EAAC,MAAM;QACTC,KAAK,EAAEhC,IAAK;QACZiC,QAAQ,EAAG5B,CAAC,IAAKJ,OAAO,CAACI,CAAC,CAAC6B,MAAM,CAACF,KAAK,CAAE;QACzCG,QAAQ;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNnC,OAAA;MAAQoC,IAAI,EAAC,QAAQ;MAAAN,QAAA,EAAC;IAAW;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACzC3B,kBAAkB,iBAAIR,OAAA;MAAA8B,QAAA,EAAG;IAA0B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEX,CAAC;AAAChC,EAAA,CA/DIF,cAAc;AAAAyC,EAAA,GAAdzC,cAAc;AAiEpB,eAAeA,cAAc;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}