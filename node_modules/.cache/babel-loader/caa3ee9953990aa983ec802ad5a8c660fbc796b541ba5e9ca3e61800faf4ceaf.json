{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import \"./Posts.css\";\n\n// const Posts = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [commentInputs, setCommentInputs] = useState({});\n\n//   useEffect(() => {\n//     const storedPosts = JSON.parse(localStorage.getItem(\"comments\"));\n//     if (!storedPosts) {\n//       fetchPosts();\n//     } else {\n//       setPosts(storedPosts);\n//     }\n//   }, []);\n\n//   const fetchPosts = async () => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         \"https://nf-api.onrender.com/api/v1/social/posts\",\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch posts\");\n//       }\n//       const postData = await response.json();\n//       setPosts(postData);\n//     } catch (error) {\n//       console.error(\"Error fetching posts:\", error);\n//       setError(error.message);\n//     }\n//   };\n\n//   const handleCommentSubmit = async (postId, comment) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: comment }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n\n//       const updatedPosts = posts.map((post) =>\n//         post.id === postId\n//           ? {\n//               ...post,\n//               comments: [...(post.comments || []), { body: comment }],\n//             }\n//           : post\n//       );\n//       setPosts(updatedPosts);\n\n//       localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//       clearCommentInput(postId);\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   const handleReactToPost = (postId) => {\n//     const updatedPosts = posts.map((post) =>\n//       post.id === postId\n//         ? {\n//             ...post,\n//             reacted: !post.reacted,\n//           }\n//         : post\n//     );\n//     setPosts(updatedPosts);\n//     localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//   };\n\n//   const handleCommentInputChange = (postId, value) => {\n//     setCommentInputs((prevInputs) => ({\n//       ...prevInputs,\n//       [postId]: value,\n//     }));\n//   };\n\n//   const clearCommentInput = (postId) => {\n//     setCommentInputs((prevInputs) => ({\n//       ...prevInputs,\n//       [postId]: \"\",\n//     }));\n//   };\n\n//   const handleRemoveComment = (postId, index) => {\n//     const updatedPosts = posts.map((post) => {\n//       if (post.id === postId) {\n//         const updatedComments = [...post.comments];\n//         updatedComments.splice(index, 1);\n//         return {\n//           ...post,\n//           comments: updatedComments,\n//         };\n//       }\n//       return post;\n//     });\n//     setPosts(updatedPosts);\n//     localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//   };\n\n//   return (\n//     <div className=\"posts-page\">\n//       <Navbar />\n//       <div className=\"posts-content\">\n//         <h1>Posts</h1>\n//         {error && <p>Error: {error}</p>}\n//         <div className=\"posts-container\">\n//           {posts.map((post) => (\n//             <div className=\"post-card\" key={post.id}>\n//               <div className=\"card\" id=\"card-border\">\n//                 <div className=\"card-body\">\n//                   <p className=\"card-title\">\n//                     {post.title}\n//                     <button\n//                       onClick={() => handleReactToPost(post.id)}\n//                       className=\"btn btn-link float-end\"\n//                       style={{ fontSize: \"1.2rem\" }}\n//                     >\n//                       {post.reacted ? (\n//                         <i className=\"bi bi-heart-fill text-danger\"></i>\n//                       ) : (\n//                         <i className=\"bi bi-heart text-danger\"></i>\n//                       )}\n//                     </button>\n//                   </p>\n//                   <form\n//                     id=\"post-form\"\n//                     onSubmit={(e) => {\n//                       e.preventDefault();\n//                       handleCommentSubmit(post.id, commentInputs[post.id]);\n//                     }}\n//                   >\n//                     <div className=\"form-group\">\n//                       <textarea\n//                         className=\"form-control\"\n//                         rows=\"3\"\n//                         value={commentInputs[post.id] || \"\"}\n//                         onChange={(e) =>\n//                           handleCommentInputChange(post.id, e.target.value)\n//                         }\n//                         placeholder=\"Write a comment...\"\n//                       />\n//                     </div>\n//                     <button type=\"submit\" className=\"btn btn-primary\">\n//                       Submit\n//                     </button>\n//                   </form>\n//                   {post.comments && (\n//                     <ul className=\"list-group list-group-flush\">\n//                       {post.comments.map((comment, index) => (\n//                         <li key={index} className=\"list-group-item\">\n//                           {comment.body}\n//                           <button\n//                             className=\"btn btn-link float-end\"\n//                             onClick={() => handleRemoveComment(post.id, index)}\n//                           >\n//                             <i className=\"bi bi-x text-danger\"></i>\n//                           </button>\n//                         </li>\n//                       ))}\n//                     </ul>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Posts;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import \"./Posts.css\";\n\n// const Posts = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [commentInputs, setCommentInputs] = useState({});\n\n//   useEffect(() => {\n//     const storedPosts = JSON.parse(localStorage.getItem(\"comments\"));\n//     if (!storedPosts) {\n//       fetchPosts();\n//     } else {\n//       setPosts(storedPosts);\n//     }\n//   }, []);\n\n//   const fetchPosts = async () => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         \"https://nf-api.onrender.com/api/v1/social/posts\",\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch posts\");\n//       }\n//       const postData = await response.json();\n//       console.log(\"Post data:\", postData);\n//       const postsWithAuthorName = postData.map((post) => ({\n//         ...post,\n//         authorName: post.author ? post.author.name : \"Unknown\",\n//       }));\n//       setPosts(postsWithAuthorName);\n//     } catch (error) {\n//       console.error(\"Error fetching posts:\", error);\n//       setError(error.message);\n//     }\n//   };\n\n//   const handleCommentSubmit = async (postId, comment) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: comment }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n\n//       const updatedPosts = posts.map((post) =>\n//         post.id === postId\n//           ? {\n//               ...post,\n//               comments: [...(post.comments || []), { body: comment }],\n//             }\n//           : post\n//       );\n//       setPosts(updatedPosts);\n\n//       localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//       clearCommentInput(postId);\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   const handleReactToPost = (postId) => {\n//     const updatedPosts = posts.map((post) =>\n//       post.id === postId\n//         ? {\n//             ...post,\n//             reacted: !post.reacted,\n//           }\n//         : post\n//     );\n//     setPosts(updatedPosts);\n//     localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//   };\n\n//   const handleCommentInputChange = (postId, value) => {\n//     setCommentInputs((prevInputs) => ({\n//       ...prevInputs,\n//       [postId]: value,\n//     }));\n//   };\n\n//   const clearCommentInput = (postId) => {\n//     setCommentInputs((prevInputs) => ({\n//       ...prevInputs,\n//       [postId]: \"\",\n//     }));\n//   };\n\n//   const handleRemoveComment = (postId, index) => {\n//     const updatedPosts = posts.map((post) => {\n//       if (post.id === postId) {\n//         const updatedComments = [...post.comments];\n//         updatedComments.splice(index, 1);\n//         return {\n//           ...post,\n//           comments: updatedComments,\n//         };\n//       }\n//       return post;\n//     });\n//     setPosts(updatedPosts);\n//     localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//   };\n\n//   return (\n//     <div className=\"posts-page\">\n//       <Navbar />\n//       <div className=\"posts-content\">\n//         <h1>Posts</h1>\n//         {error && <p>Error: {error}</p>}\n//         <div className=\"posts-container\">\n//           {posts.map((post) => (\n//             <div className=\"post-card\" key={post.id}>\n//               <div className=\"card\" id=\"card-border\">\n//                 <div className=\"card-body\">\n//                   <Link to={`/post/${post.id}`} className=\"post-link\">\n//                     <p className=\"card-title\">{post.title}</p>\n//                   </Link>\n//                   <p>Author: {post.authorName}</p>\n\n//                   <button\n//                     onClick={() => handleReactToPost(post.id)}\n//                     className=\"btn btn-link float-end\"\n//                     style={{ fontSize: \"1.2rem\" }}\n//                   >\n//                     {post.reacted ? (\n//                       <i className=\"bi bi-heart-fill text-danger\"></i>\n//                     ) : (\n//                       <i className=\"bi bi-heart text-danger\"></i>\n//                     )}\n//                   </button>\n//                   <form\n//                     id=\"post-form\"\n//                     onSubmit={(e) => {\n//                       e.preventDefault();\n//                       handleCommentSubmit(post.id, commentInputs[post.id]);\n//                     }}\n//                   >\n//                     <div className=\"form-group\">\n//                       <textarea\n//                         className=\"form-control\"\n//                         rows=\"3\"\n//                         value={commentInputs[post.id] || \"\"}\n//                         onChange={(e) =>\n//                           handleCommentInputChange(post.id, e.target.value)\n//                         }\n//                         placeholder=\"Write a comment...\"\n//                       />\n//                     </div>\n//                     <button type=\"submit\" className=\"btn btn-primary\">\n//                       Submit\n//                     </button>\n//                   </form>\n//                   {post.comments && (\n//                     <ul className=\"list-group list-group-flush\">\n//                       {post.comments.map((comment, index) => (\n//                         <li key={index} className=\"list-group-item\">\n//                           {comment.body}\n//                           <button\n//                             className=\"btn btn-link float-end\"\n//                             onClick={() => handleRemoveComment(post.id, index)}\n//                           >\n//                             <i className=\"bi bi-x text-danger\"></i>\n//                           </button>\n//                         </li>\n//                       ))}\n//                     </ul>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Posts;","map":{"version":3,"names":[],"sources":["/Users/ecf/holi-exam/src/Pages/Posts.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import \"./Posts.css\";\n\n// const Posts = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [commentInputs, setCommentInputs] = useState({});\n\n//   useEffect(() => {\n//     const storedPosts = JSON.parse(localStorage.getItem(\"comments\"));\n//     if (!storedPosts) {\n//       fetchPosts();\n//     } else {\n//       setPosts(storedPosts);\n//     }\n//   }, []);\n\n//   const fetchPosts = async () => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         \"https://nf-api.onrender.com/api/v1/social/posts\",\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch posts\");\n//       }\n//       const postData = await response.json();\n//       setPosts(postData);\n//     } catch (error) {\n//       console.error(\"Error fetching posts:\", error);\n//       setError(error.message);\n//     }\n//   };\n\n//   const handleCommentSubmit = async (postId, comment) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: comment }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n\n//       const updatedPosts = posts.map((post) =>\n//         post.id === postId\n//           ? {\n//               ...post,\n//               comments: [...(post.comments || []), { body: comment }],\n//             }\n//           : post\n//       );\n//       setPosts(updatedPosts);\n\n//       localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//       clearCommentInput(postId);\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   const handleReactToPost = (postId) => {\n//     const updatedPosts = posts.map((post) =>\n//       post.id === postId\n//         ? {\n//             ...post,\n//             reacted: !post.reacted,\n//           }\n//         : post\n//     );\n//     setPosts(updatedPosts);\n//     localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//   };\n\n//   const handleCommentInputChange = (postId, value) => {\n//     setCommentInputs((prevInputs) => ({\n//       ...prevInputs,\n//       [postId]: value,\n//     }));\n//   };\n\n//   const clearCommentInput = (postId) => {\n//     setCommentInputs((prevInputs) => ({\n//       ...prevInputs,\n//       [postId]: \"\",\n//     }));\n//   };\n\n//   const handleRemoveComment = (postId, index) => {\n//     const updatedPosts = posts.map((post) => {\n//       if (post.id === postId) {\n//         const updatedComments = [...post.comments];\n//         updatedComments.splice(index, 1);\n//         return {\n//           ...post,\n//           comments: updatedComments,\n//         };\n//       }\n//       return post;\n//     });\n//     setPosts(updatedPosts);\n//     localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//   };\n\n//   return (\n//     <div className=\"posts-page\">\n//       <Navbar />\n//       <div className=\"posts-content\">\n//         <h1>Posts</h1>\n//         {error && <p>Error: {error}</p>}\n//         <div className=\"posts-container\">\n//           {posts.map((post) => (\n//             <div className=\"post-card\" key={post.id}>\n//               <div className=\"card\" id=\"card-border\">\n//                 <div className=\"card-body\">\n//                   <p className=\"card-title\">\n//                     {post.title}\n//                     <button\n//                       onClick={() => handleReactToPost(post.id)}\n//                       className=\"btn btn-link float-end\"\n//                       style={{ fontSize: \"1.2rem\" }}\n//                     >\n//                       {post.reacted ? (\n//                         <i className=\"bi bi-heart-fill text-danger\"></i>\n//                       ) : (\n//                         <i className=\"bi bi-heart text-danger\"></i>\n//                       )}\n//                     </button>\n//                   </p>\n//                   <form\n//                     id=\"post-form\"\n//                     onSubmit={(e) => {\n//                       e.preventDefault();\n//                       handleCommentSubmit(post.id, commentInputs[post.id]);\n//                     }}\n//                   >\n//                     <div className=\"form-group\">\n//                       <textarea\n//                         className=\"form-control\"\n//                         rows=\"3\"\n//                         value={commentInputs[post.id] || \"\"}\n//                         onChange={(e) =>\n//                           handleCommentInputChange(post.id, e.target.value)\n//                         }\n//                         placeholder=\"Write a comment...\"\n//                       />\n//                     </div>\n//                     <button type=\"submit\" className=\"btn btn-primary\">\n//                       Submit\n//                     </button>\n//                   </form>\n//                   {post.comments && (\n//                     <ul className=\"list-group list-group-flush\">\n//                       {post.comments.map((comment, index) => (\n//                         <li key={index} className=\"list-group-item\">\n//                           {comment.body}\n//                           <button\n//                             className=\"btn btn-link float-end\"\n//                             onClick={() => handleRemoveComment(post.id, index)}\n//                           >\n//                             <i className=\"bi bi-x text-danger\"></i>\n//                           </button>\n//                         </li>\n//                       ))}\n//                     </ul>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Posts;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import \"./Posts.css\";\n\n// const Posts = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [commentInputs, setCommentInputs] = useState({});\n\n//   useEffect(() => {\n//     const storedPosts = JSON.parse(localStorage.getItem(\"comments\"));\n//     if (!storedPosts) {\n//       fetchPosts();\n//     } else {\n//       setPosts(storedPosts);\n//     }\n//   }, []);\n\n//   const fetchPosts = async () => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         \"https://nf-api.onrender.com/api/v1/social/posts\",\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch posts\");\n//       }\n//       const postData = await response.json();\n//       console.log(\"Post data:\", postData);\n//       const postsWithAuthorName = postData.map((post) => ({\n//         ...post,\n//         authorName: post.author ? post.author.name : \"Unknown\",\n//       }));\n//       setPosts(postsWithAuthorName);\n//     } catch (error) {\n//       console.error(\"Error fetching posts:\", error);\n//       setError(error.message);\n//     }\n//   };\n\n//   const handleCommentSubmit = async (postId, comment) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: comment }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n\n//       const updatedPosts = posts.map((post) =>\n//         post.id === postId\n//           ? {\n//               ...post,\n//               comments: [...(post.comments || []), { body: comment }],\n//             }\n//           : post\n//       );\n//       setPosts(updatedPosts);\n\n//       localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//       clearCommentInput(postId);\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   const handleReactToPost = (postId) => {\n//     const updatedPosts = posts.map((post) =>\n//       post.id === postId\n//         ? {\n//             ...post,\n//             reacted: !post.reacted,\n//           }\n//         : post\n//     );\n//     setPosts(updatedPosts);\n//     localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//   };\n\n//   const handleCommentInputChange = (postId, value) => {\n//     setCommentInputs((prevInputs) => ({\n//       ...prevInputs,\n//       [postId]: value,\n//     }));\n//   };\n\n//   const clearCommentInput = (postId) => {\n//     setCommentInputs((prevInputs) => ({\n//       ...prevInputs,\n//       [postId]: \"\",\n//     }));\n//   };\n\n//   const handleRemoveComment = (postId, index) => {\n//     const updatedPosts = posts.map((post) => {\n//       if (post.id === postId) {\n//         const updatedComments = [...post.comments];\n//         updatedComments.splice(index, 1);\n//         return {\n//           ...post,\n//           comments: updatedComments,\n//         };\n//       }\n//       return post;\n//     });\n//     setPosts(updatedPosts);\n//     localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//   };\n\n//   return (\n//     <div className=\"posts-page\">\n//       <Navbar />\n//       <div className=\"posts-content\">\n//         <h1>Posts</h1>\n//         {error && <p>Error: {error}</p>}\n//         <div className=\"posts-container\">\n//           {posts.map((post) => (\n//             <div className=\"post-card\" key={post.id}>\n//               <div className=\"card\" id=\"card-border\">\n//                 <div className=\"card-body\">\n//                   <Link to={`/post/${post.id}`} className=\"post-link\">\n//                     <p className=\"card-title\">{post.title}</p>\n//                   </Link>\n//                   <p>Author: {post.authorName}</p>\n\n//                   <button\n//                     onClick={() => handleReactToPost(post.id)}\n//                     className=\"btn btn-link float-end\"\n//                     style={{ fontSize: \"1.2rem\" }}\n//                   >\n//                     {post.reacted ? (\n//                       <i className=\"bi bi-heart-fill text-danger\"></i>\n//                     ) : (\n//                       <i className=\"bi bi-heart text-danger\"></i>\n//                     )}\n//                   </button>\n//                   <form\n//                     id=\"post-form\"\n//                     onSubmit={(e) => {\n//                       e.preventDefault();\n//                       handleCommentSubmit(post.id, commentInputs[post.id]);\n//                     }}\n//                   >\n//                     <div className=\"form-group\">\n//                       <textarea\n//                         className=\"form-control\"\n//                         rows=\"3\"\n//                         value={commentInputs[post.id] || \"\"}\n//                         onChange={(e) =>\n//                           handleCommentInputChange(post.id, e.target.value)\n//                         }\n//                         placeholder=\"Write a comment...\"\n//                       />\n//                     </div>\n//                     <button type=\"submit\" className=\"btn btn-primary\">\n//                       Submit\n//                     </button>\n//                   </form>\n//                   {post.comments && (\n//                     <ul className=\"list-group list-group-flush\">\n//                       {post.comments.map((comment, index) => (\n//                         <li key={index} className=\"list-group-item\">\n//                           {comment.body}\n//                           <button\n//                             className=\"btn btn-link float-end\"\n//                             onClick={() => handleRemoveComment(post.id, index)}\n//                           >\n//                             <i className=\"bi bi-x text-danger\"></i>\n//                           </button>\n//                         </li>\n//                       ))}\n//                     </ul>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Posts;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}