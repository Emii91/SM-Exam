{"ast":null,"code":"var _jsxFileName = \"/Users/ecf/holi-exam/src/Pages/Posts.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import \"./Posts.css\";\n\n// const Posts = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [commentInputs, setCommentInputs] = useState({});\n\n//   useEffect(() => {\n//     const storedPosts = JSON.parse(localStorage.getItem(\"comments\"));\n//     if (!storedPosts) {\n//       fetchPosts();\n//     } else {\n//       setPosts(storedPosts);\n//     }\n//   }, []);\n\n//   const fetchPosts = async () => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         \"https://nf-api.onrender.com/api/v1/social/posts\",\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch posts\");\n//       }\n//       const postData = await response.json();\n//       setPosts(postData);\n//     } catch (error) {\n//       console.error(\"Error fetching posts:\", error);\n//       setError(error.message);\n//     }\n//   };\n\n//   const handleCommentSubmit = async (postId, comment) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: comment }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n\n//       const updatedPosts = posts.map((post) =>\n//         post.id === postId\n//           ? {\n//               ...post,\n//               comments: [...(post.comments || []), { body: comment }],\n//             }\n//           : post\n//       );\n//       setPosts(updatedPosts);\n\n//       localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//       clearCommentInput(postId);\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   const handleReactToPost = (postId) => {\n//     const updatedPosts = posts.map((post) =>\n//       post.id === postId\n//         ? {\n//             ...post,\n//             reacted: !post.reacted,\n//           }\n//         : post\n//     );\n//     setPosts(updatedPosts);\n//     localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//   };\n\n//   const handleCommentInputChange = (postId, value) => {\n//     setCommentInputs((prevInputs) => ({\n//       ...prevInputs,\n//       [postId]: value,\n//     }));\n//   };\n\n//   const clearCommentInput = (postId) => {\n//     setCommentInputs((prevInputs) => ({\n//       ...prevInputs,\n//       [postId]: \"\",\n//     }));\n//   };\n\n//   const handleRemoveComment = (postId, index) => {\n//     const updatedPosts = posts.map((post) => {\n//       if (post.id === postId) {\n//         const updatedComments = [...post.comments];\n//         updatedComments.splice(index, 1);\n//         return {\n//           ...post,\n//           comments: updatedComments,\n//         };\n//       }\n//       return post;\n//     });\n//     setPosts(updatedPosts);\n//     localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//   };\n\n//   return (\n//     <div className=\"posts-page\">\n//       <Navbar />\n//       <div className=\"posts-content\">\n//         <h1>Posts</h1>\n//         {error && <p>Error: {error}</p>}\n//         <div className=\"posts-container\">\n//           {posts.map((post) => (\n//             <div className=\"post-card\" key={post.id}>\n//               <div className=\"card\" id=\"card-border\">\n//                 <div className=\"card-body\">\n//                   <p className=\"card-title\">\n//                     {post.title}\n//                     <button\n//                       onClick={() => handleReactToPost(post.id)}\n//                       className=\"btn btn-link float-end\"\n//                       style={{ fontSize: \"1.2rem\" }}\n//                     >\n//                       {post.reacted ? (\n//                         <i className=\"bi bi-heart-fill text-danger\"></i>\n//                       ) : (\n//                         <i className=\"bi bi-heart text-danger\"></i>\n//                       )}\n//                     </button>\n//                   </p>\n//                   <form\n//                     id=\"post-form\"\n//                     onSubmit={(e) => {\n//                       e.preventDefault();\n//                       handleCommentSubmit(post.id, commentInputs[post.id]);\n//                     }}\n//                   >\n//                     <div className=\"form-group\">\n//                       <textarea\n//                         className=\"form-control\"\n//                         rows=\"3\"\n//                         value={commentInputs[post.id] || \"\"}\n//                         onChange={(e) =>\n//                           handleCommentInputChange(post.id, e.target.value)\n//                         }\n//                         placeholder=\"Write a comment...\"\n//                       />\n//                     </div>\n//                     <button type=\"submit\" className=\"btn btn-primary\">\n//                       Submit\n//                     </button>\n//                   </form>\n//                   {post.comments && (\n//                     <ul className=\"list-group list-group-flush\">\n//                       {post.comments.map((comment, index) => (\n//                         <li key={index} className=\"list-group-item\">\n//                           {comment.body}\n//                           <button\n//                             className=\"btn btn-link float-end\"\n//                             onClick={() => handleRemoveComment(post.id, index)}\n//                           >\n//                             <i className=\"bi bi-x text-danger\"></i>\n//                           </button>\n//                         </li>\n//                       ))}\n//                     </ul>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Posts;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Navbar from \"../Components/Layouts/Navbar\";\nimport \"./Posts.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Posts = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(null);\n  const [commentInputs, setCommentInputs] = useState({});\n  useEffect(() => {\n    const storedPosts = JSON.parse(localStorage.getItem(\"comments\"));\n    if (!storedPosts) {\n      fetchPosts();\n    } else {\n      setPosts(storedPosts);\n    }\n  }, []);\n  const fetchPosts = async () => {\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(\"https://nf-api.onrender.com/api/v1/social/posts/${postId}\", {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch posts\");\n      }\n      const postData = await response.json();\n      console.log(\"Post object:\", postData);\n      setPosts(postData);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      setError(error.message);\n    }\n  };\n  const handleCommentSubmit = async (postId, comment) => {\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(`https://nf-api.onrender.com/api/v1/social/posts/${postId}/comment`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          body: comment\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to submit comment\");\n      }\n      console.log(\"Comment submitted successfully!\");\n      const updatedPosts = posts.map(post => post.id === postId ? {\n        ...post,\n        comments: [...(post.comments || []), {\n          body: comment\n        }]\n      } : post);\n      setPosts(updatedPosts);\n      localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n      clearCommentInput(postId);\n    } catch (error) {\n      console.error(\"Error submitting comment:\", error);\n    }\n  };\n  const handleReactToPost = postId => {\n    const updatedPosts = posts.map(post => post.id === postId ? {\n      ...post,\n      reacted: !post.reacted\n    } : post);\n    setPosts(updatedPosts);\n    localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n  };\n  const handleCommentInputChange = (postId, value) => {\n    setCommentInputs(prevInputs => ({\n      ...prevInputs,\n      [postId]: value\n    }));\n  };\n  const clearCommentInput = postId => {\n    setCommentInputs(prevInputs => ({\n      ...prevInputs,\n      [postId]: \"\"\n    }));\n  };\n  const handleRemoveComment = (postId, index) => {\n    const updatedPosts = posts.map(post => {\n      if (post.id === postId) {\n        const updatedComments = [...post.comments];\n        updatedComments.splice(index, 1);\n        return {\n          ...post,\n          comments: updatedComments\n        };\n      }\n      return post;\n    });\n    setPosts(updatedPosts);\n    localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts-page\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posts-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"posts-container\",\n        children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-card\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card\",\n            id: \"card-border\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: [/*#__PURE__*/_jsxDEV(Link, {\n                to: `/post/${post.id}`,\n                className: \"post-link\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"card-title\",\n                  children: post.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Author: \", post.author.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleReactToPost(post.id),\n                className: \"btn btn-link float-end\",\n                style: {\n                  fontSize: \"1.2rem\"\n                },\n                children: post.reacted ? /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"bi bi-heart-fill text-danger\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 337,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"bi bi-heart text-danger\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n                id: \"post-form\",\n                onSubmit: e => {\n                  e.preventDefault();\n                  handleCommentSubmit(post.id, commentInputs[post.id]);\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-group\",\n                  children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                    className: \"form-control\",\n                    rows: \"3\",\n                    value: commentInputs[post.id] || \"\",\n                    onChange: e => handleCommentInputChange(post.id, e.target.value),\n                    placeholder: \"Write a comment...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 350,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  className: \"btn btn-primary\",\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 19\n              }, this), post.comments && /*#__PURE__*/_jsxDEV(\"ul\", {\n                className: \"list-group list-group-flush\",\n                children: post.comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"list-group-item\",\n                  children: [comment.body, /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-link float-end\",\n                    onClick: () => handleRemoveComment(post.id, index),\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"bi bi-x text-danger\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 373,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 369,\n                    columnNumber: 27\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 367,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 316,\n    columnNumber: 5\n  }, this);\n};\n_s(Posts, \"KO5IBiNIx6OHP9XUaykC7DboBiY=\");\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useState","useEffect","Link","Navbar","jsxDEV","_jsxDEV","Posts","_s","posts","setPosts","error","setError","commentInputs","setCommentInputs","storedPosts","JSON","parse","localStorage","getItem","fetchPosts","authToken","response","fetch","headers","Authorization","ok","Error","postData","json","console","log","message","handleCommentSubmit","postId","comment","method","body","stringify","updatedPosts","map","post","id","comments","setItem","clearCommentInput","handleReactToPost","reacted","handleCommentInputChange","value","prevInputs","handleRemoveComment","index","updatedComments","splice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","title","author","name","onClick","style","fontSize","onSubmit","e","preventDefault","rows","onChange","target","placeholder","type","_c","$RefreshReg$"],"sources":["/Users/ecf/holi-exam/src/Pages/Posts.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import Navbar from \"../Components/Layouts/Navbar\";\n// import \"./Posts.css\";\n\n// const Posts = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [commentInputs, setCommentInputs] = useState({});\n\n//   useEffect(() => {\n//     const storedPosts = JSON.parse(localStorage.getItem(\"comments\"));\n//     if (!storedPosts) {\n//       fetchPosts();\n//     } else {\n//       setPosts(storedPosts);\n//     }\n//   }, []);\n\n//   const fetchPosts = async () => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         \"https://nf-api.onrender.com/api/v1/social/posts\",\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch posts\");\n//       }\n//       const postData = await response.json();\n//       setPosts(postData);\n//     } catch (error) {\n//       console.error(\"Error fetching posts:\", error);\n//       setError(error.message);\n//     }\n//   };\n\n//   const handleCommentSubmit = async (postId, comment) => {\n//     try {\n//       const authToken = localStorage.getItem(\"accessToken\");\n//       const response = await fetch(\n//         `https://nf-api.onrender.com/api/v1/social/posts/${postId}/comment`,\n//         {\n//           method: \"POST\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//           body: JSON.stringify({ body: comment }),\n//         }\n//       );\n//       if (!response.ok) {\n//         throw new Error(\"Failed to submit comment\");\n//       }\n//       console.log(\"Comment submitted successfully!\");\n\n//       const updatedPosts = posts.map((post) =>\n//         post.id === postId\n//           ? {\n//               ...post,\n//               comments: [...(post.comments || []), { body: comment }],\n//             }\n//           : post\n//       );\n//       setPosts(updatedPosts);\n\n//       localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//       clearCommentInput(postId);\n//     } catch (error) {\n//       console.error(\"Error submitting comment:\", error);\n//     }\n//   };\n\n//   const handleReactToPost = (postId) => {\n//     const updatedPosts = posts.map((post) =>\n//       post.id === postId\n//         ? {\n//             ...post,\n//             reacted: !post.reacted,\n//           }\n//         : post\n//     );\n//     setPosts(updatedPosts);\n//     localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//   };\n\n//   const handleCommentInputChange = (postId, value) => {\n//     setCommentInputs((prevInputs) => ({\n//       ...prevInputs,\n//       [postId]: value,\n//     }));\n//   };\n\n//   const clearCommentInput = (postId) => {\n//     setCommentInputs((prevInputs) => ({\n//       ...prevInputs,\n//       [postId]: \"\",\n//     }));\n//   };\n\n//   const handleRemoveComment = (postId, index) => {\n//     const updatedPosts = posts.map((post) => {\n//       if (post.id === postId) {\n//         const updatedComments = [...post.comments];\n//         updatedComments.splice(index, 1);\n//         return {\n//           ...post,\n//           comments: updatedComments,\n//         };\n//       }\n//       return post;\n//     });\n//     setPosts(updatedPosts);\n//     localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n//   };\n\n//   return (\n//     <div className=\"posts-page\">\n//       <Navbar />\n//       <div className=\"posts-content\">\n//         <h1>Posts</h1>\n//         {error && <p>Error: {error}</p>}\n//         <div className=\"posts-container\">\n//           {posts.map((post) => (\n//             <div className=\"post-card\" key={post.id}>\n//               <div className=\"card\" id=\"card-border\">\n//                 <div className=\"card-body\">\n//                   <p className=\"card-title\">\n//                     {post.title}\n//                     <button\n//                       onClick={() => handleReactToPost(post.id)}\n//                       className=\"btn btn-link float-end\"\n//                       style={{ fontSize: \"1.2rem\" }}\n//                     >\n//                       {post.reacted ? (\n//                         <i className=\"bi bi-heart-fill text-danger\"></i>\n//                       ) : (\n//                         <i className=\"bi bi-heart text-danger\"></i>\n//                       )}\n//                     </button>\n//                   </p>\n//                   <form\n//                     id=\"post-form\"\n//                     onSubmit={(e) => {\n//                       e.preventDefault();\n//                       handleCommentSubmit(post.id, commentInputs[post.id]);\n//                     }}\n//                   >\n//                     <div className=\"form-group\">\n//                       <textarea\n//                         className=\"form-control\"\n//                         rows=\"3\"\n//                         value={commentInputs[post.id] || \"\"}\n//                         onChange={(e) =>\n//                           handleCommentInputChange(post.id, e.target.value)\n//                         }\n//                         placeholder=\"Write a comment...\"\n//                       />\n//                     </div>\n//                     <button type=\"submit\" className=\"btn btn-primary\">\n//                       Submit\n//                     </button>\n//                   </form>\n//                   {post.comments && (\n//                     <ul className=\"list-group list-group-flush\">\n//                       {post.comments.map((comment, index) => (\n//                         <li key={index} className=\"list-group-item\">\n//                           {comment.body}\n//                           <button\n//                             className=\"btn btn-link float-end\"\n//                             onClick={() => handleRemoveComment(post.id, index)}\n//                           >\n//                             <i className=\"bi bi-x text-danger\"></i>\n//                           </button>\n//                         </li>\n//                       ))}\n//                     </ul>\n//                   )}\n//                 </div>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Posts;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Navbar from \"../Components/Layouts/Navbar\";\nimport \"./Posts.css\";\n\nconst Posts = () => {\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(null);\n  const [commentInputs, setCommentInputs] = useState({});\n\n  useEffect(() => {\n    const storedPosts = JSON.parse(localStorage.getItem(\"comments\"));\n    if (!storedPosts) {\n      fetchPosts();\n    } else {\n      setPosts(storedPosts);\n    }\n  }, []);\n\n  const fetchPosts = async () => {\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(\n        \"https://nf-api.onrender.com/api/v1/social/posts/${postId}\",\n        {\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n          },\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch posts\");\n      }\n      const postData = await response.json();\n      console.log(\"Post object:\", postData);\n      setPosts(postData);\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      setError(error.message);\n    }\n  };\n\n  const handleCommentSubmit = async (postId, comment) => {\n    try {\n      const authToken = localStorage.getItem(\"accessToken\");\n      const response = await fetch(\n        `https://nf-api.onrender.com/api/v1/social/posts/${postId}/comment`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${authToken}`,\n          },\n          body: JSON.stringify({ body: comment }),\n        }\n      );\n      if (!response.ok) {\n        throw new Error(\"Failed to submit comment\");\n      }\n      console.log(\"Comment submitted successfully!\");\n\n      const updatedPosts = posts.map((post) =>\n        post.id === postId\n          ? {\n              ...post,\n              comments: [...(post.comments || []), { body: comment }],\n            }\n          : post\n      );\n      setPosts(updatedPosts);\n\n      localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n      clearCommentInput(postId);\n    } catch (error) {\n      console.error(\"Error submitting comment:\", error);\n    }\n  };\n\n  const handleReactToPost = (postId) => {\n    const updatedPosts = posts.map((post) =>\n      post.id === postId\n        ? {\n            ...post,\n            reacted: !post.reacted,\n          }\n        : post\n    );\n    setPosts(updatedPosts);\n    localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n  };\n\n  const handleCommentInputChange = (postId, value) => {\n    setCommentInputs((prevInputs) => ({\n      ...prevInputs,\n      [postId]: value,\n    }));\n  };\n\n  const clearCommentInput = (postId) => {\n    setCommentInputs((prevInputs) => ({\n      ...prevInputs,\n      [postId]: \"\",\n    }));\n  };\n\n  const handleRemoveComment = (postId, index) => {\n    const updatedPosts = posts.map((post) => {\n      if (post.id === postId) {\n        const updatedComments = [...post.comments];\n        updatedComments.splice(index, 1);\n        return {\n          ...post,\n          comments: updatedComments,\n        };\n      }\n      return post;\n    });\n    setPosts(updatedPosts);\n    localStorage.setItem(\"comments\", JSON.stringify(updatedPosts));\n  };\n\n  return (\n    <div className=\"posts-page\">\n      <Navbar />\n      <div className=\"posts-content\">\n        <h1>Posts</h1>\n        {error && <p>Error: {error}</p>}\n        <div className=\"posts-container\">\n          {posts.map((post) => (\n            <div className=\"post-card\" key={post.id}>\n              <div className=\"card\" id=\"card-border\">\n                <div className=\"card-body\">\n                  <Link to={`/post/${post.id}`} className=\"post-link\">\n                    <p className=\"card-title\">{post.title}</p>\n                  </Link>\n                  <p>Author: {post.author.name}</p>\n\n                  <button\n                    onClick={() => handleReactToPost(post.id)}\n                    className=\"btn btn-link float-end\"\n                    style={{ fontSize: \"1.2rem\" }}\n                  >\n                    {post.reacted ? (\n                      <i className=\"bi bi-heart-fill text-danger\"></i>\n                    ) : (\n                      <i className=\"bi bi-heart text-danger\"></i>\n                    )}\n                  </button>\n                  <form\n                    id=\"post-form\"\n                    onSubmit={(e) => {\n                      e.preventDefault();\n                      handleCommentSubmit(post.id, commentInputs[post.id]);\n                    }}\n                  >\n                    <div className=\"form-group\">\n                      <textarea\n                        className=\"form-control\"\n                        rows=\"3\"\n                        value={commentInputs[post.id] || \"\"}\n                        onChange={(e) =>\n                          handleCommentInputChange(post.id, e.target.value)\n                        }\n                        placeholder=\"Write a comment...\"\n                      />\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\">\n                      Submit\n                    </button>\n                  </form>\n                  {post.comments && (\n                    <ul className=\"list-group list-group-flush\">\n                      {post.comments.map((comment, index) => (\n                        <li key={index} className=\"list-group-item\">\n                          {comment.body}\n                          <button\n                            className=\"btn btn-link float-end\"\n                            onClick={() => handleRemoveComment(post.id, index)}\n                          >\n                            <i className=\"bi bi-x text-danger\"></i>\n                          </button>\n                        </li>\n                      ))}\n                    </ul>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Posts;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}